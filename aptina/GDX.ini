[Python:]
from ctypes import *
import os
import time


[Python: Directories]
# Show where DevWare saves stuff
print(80 * '-')
print('Aptina Imaging installation directory')
print(apbase.home)
print('')
print('The directory of the current ini file')
print(os.path.dirname(__IniFileName))
print('')
print('The Still Capture save directory')
print(os.path.dirname(devware.getoption_str('Capture File')))
print('')
print('The Video Record save directory')
print(os.path.dirname(devware.getoption_str('VidCap File')))

[Python: Set Exposure]
print(80 * '-')
# Get input from user
ExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Current exposure time is', round(ExposureTime * 1000, 3), 'ms')
ExposureTime = float(input('Desired Exposure Time [ms]: ')) / 1000
print('Setting Exposure time to', ExposureTime, 's')
apbase.setstate('HW Exposure Time', str(ExposureTime))
ExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time has been set to', round(ExposureTime * 1000, 3), 'ms')
print(80 * '-')


[Python: Acquire X images with given exp time]
import os
import time
print(80 * '-')

# Grab and save current state of chip
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Currently, the chip is exposing for', round(WasExposureTime * 1000, 3),
    'ms, saving this value for later.')

# Ask the user for the desired exposure time and set it
DesiredExposureTime = float(input('Desired exposure time [ms]:'))
if DesiredExposureTime < 3:
    print('Going below 3 ms does not make any sense. Setting 3 ms as',
        'exposure time.')
    DesiredExposureTime = 3
if DesiredExposureTime > 2080:
    print('The Aptina chip cannot expose for longer than 2 seconds,',
    'capping exposure time there.')
    DesiredExposureTime = 2080
apbase.setstate('hw exposure time', str(DesiredExposureTime / 1000.0))
CurrentExposureTime = float(apbase.getstate('HW Exposure Time'))

# Grab some images from the buffer to make sure the exposure time is set
for i in range(4):
    Return, Image = apbase.Camera().grab_frame()
print('Chip set to expose for', round(CurrentExposureTime * 1000, 3), 'ms.')

# Ask for how long we should record? Gives NumberOfImages, fps, etc. If the
# user wants to record more than 7.5 fps inform him of the fact that this
# cannot be done.
RecordingTime = int(input('How long would you like to record images? [s]:'))
NumberOfImages = int(round(RecordingTime * 1000 / DesiredExposureTime))
print('You want to grab images with', DesiredExposureTime, 'ms exposure time',
    'corresponding to', round(1 / (DesiredExposureTime / 1000), 3), 'fps.')
print('During', RecordingTime, 's, this will give',
    int(round(RecordingTime * 1000 / DesiredExposureTime)),
    'images in total.')
if 1 / (DesiredExposureTime / 1000) > 8:
    print('I reduce the amount of recorded images to match the maximally',
        'achievable 7.5 fpsso that you do not have to wait for',
        round(NumberOfImages / 7.5, 3), 's (instead of the requested',
        RecordingTime, 's).')
    NumberOfImages = int(round(RecordingTime * 8))  # fps
    print('You could go as high as 134 ms with the exposure time to match',
        'exposure and readout time.')
    time.sleep(1)

# Prepare output directory and set it in DevWareX
Timer = int(time.time())
Suffix = str(int(DesiredExposureTime)).zfill(4) + 'ms_' + \
    str(NumberOfImages) + 'img'
SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX',
    str(Timer) + '_' + Suffix)
try:
    os.makedirs(SaveDir)
except FileExistsError:
    print(SaveDir, 'already exists, proceeding')
devware.setoption_str('Capture File', SaveDir)
print('Images are saved to', devware.getoption_str('Capture File'))
print(80 * '-')

# Save images and do some timing on the way
StartTime = time.time()
for i in range(NumberOfImages):
    s = time.time()
    # Grab the frame
    Return, Image = apbase.Camera().grab_frame()
    # Save it to a nicely named file
    Filename = Suffix + '_' + str(i + 1).zfill(len(str(NumberOfImages))) +\
        '.raw'
    with open(os.path.join(SaveDir, Filename), 'wb') as f:
        f.write(Image)
    e = time.time()
    # Log some stuff to the console
    print(str(i).zfill(len(str(NumberOfImages))) + '/' +
        str(NumberOfImages) + ': Exposing for', round(DesiredExposureTime),
        'ms and saving @', round((1 / (e - s)), 1), 'fps.')
print(80 * '-')
EndTime = time.time()
# Inform the user about what happened.
print('The whole process took me', round(EndTime - StartTime, 3),
       's. You requested', RecordingTime, 's.')
print(80 * '-')

# Get the sensor back to the initial state
apbase.setstate('hw exposure time', str(WasExposureTime))
IsExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Setting exposure time back to', round(IsExposureTime * 1000, 3),
    'ms, which should be the same as it was before we started, namely',
    str(round(WasExposureTime * 1000, 3)), 'ms.')
print(80 * '-')

# Final output
print('Saved all images to', SaveDir)
print('Open the RAW files in Fiji as "16-bit Unsigned" with the "Width" and',
    '"Height" given in the DevWare-window and with "Little-Endian byte order"')

[Python: Acquire X images over a certain distance of the rail to test focus]
import os
import time
print(80 * '-')

# Grab and save current state of chip
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Currently, the chip is exposing for', round(WasExposureTime * 1000, 3),
    'ms, saving this value for later.')

# Ask the user for the desired exposure time and set it
DesiredExposureTime = float(input('Desired exposure time [ms]:'))
apbase.setstate('hw exposure time', str(DesiredExposureTime / 1000.0))
# Grab some images from the buffer to make the exposure time stick
for i in range(4):
    Return, Image = apbase.Camera().grab_frame()
CurrentExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time set to', round(CurrentExposureTime * 1000, 3), 'ms.')

# Ask the user for what distance he/she'd like to record. And for how many
# steps
StartPoint = float(input('Where do you want to start on the rail? [cm]:'))
StartPoint = int(round(StartPoint * 10))
EndPoint = float(input('Where do you want to stop on the rail? [cm]:'))
EndPoint = int(round(EndPoint * 10))
if StartPoint == EndPoint:
    print('You have to move at least a bit, i.e. the starting and end point',
        'have to be different. Increasing the total distance by 1 cm.')
    EndPoint += 10
StepNumber = int(input(' '.join(['How many steps would you like to image',\
    'between', str(StartPoint), 'mm and', str(EndPoint), 'mm?:'])))
if StepNumber > 40:
    print('Are you sure you want to record', StepNumber, 'steps?')
    StepNumber = int(input(' '.join(['If you want, you can enter a smaller',
        'number of steps...'])))

if int(round(EndPoint - StartPoint) / StepNumber) < 1:
    EndPoint = StartPoint + StepNumber
    print('These settings would lead to steps smaller than 1mm, I am',
        'increasing the end point to', EndPoint / 10, 'cm so that we can do',
        'the', StepNumber, 'desired steps with at least 1mm step width',
        'between each shot')

# Prepare output directory and set it in DevWareX
Timer = int(time.time())
Suffix = str(int(CurrentExposureTime * 1000)).zfill(4) + 'ms_' + \
    str(StartPoint) + 'mm-' + str(EndPoint) + 'mm_' +\
    str(StepNumber).zfill(2) + 'steps'
SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX',
    str(Timer) + '_' + Suffix)
try:
    os.makedirs(SaveDir)
except FileExistsError:
    print(SaveDir, 'already exists, proceeding')
devware.setoption_str('Capture File', SaveDir)
print('Saving the', StepNumber, 'Images to',
    devware.getoption_str('Capture File'))
print(80 * '-')

# Step through the chosen positions (+start & end)
SleepyTime = 0.5
Counter = 1
for Position in range(StartPoint, EndPoint + 1,
                       int(round(EndPoint - StartPoint) / (StepNumber))):
    print(30 * '-', 'Step', str(Counter) + '/' + str(StepNumber + 1),
        30 * '-')
    if Counter == 1:
        print ('* Move slider to start position at ', end='')
    elif Counter == StepNumber + 1:
        print ('* Move slider to end position at ', end='')
    else:
        print ('* Move slider to ', end='')
    print(Position / 10, 'cm')
    time.sleep(SleepyTime)
    print ('* Get ready to expose with',
        round(CurrentExposureTime * 1000, 3), 'ms')
    time.sleep(SleepyTime)
    Return, Image = apbase.Camera().grab_frame()
    # Save it to a nicely named file
    Filename = Suffix + '_' + str(Position).zfill(3) + 'mm.raw'
    with open(os.path.join(SaveDir, Filename), 'wb') as f:
        f.write(Image)
    print ('* Written image to', Filename)
    #~ Counter += 1
    time.sleep(SleepyTime)

print(80 * '-')
# Get the sensor back to the initial state
apbase.setstate('hw exposure time', str(WasExposureTime))
IsExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Setting exposure time back to', round(IsExposureTime * 1000, 3),
    'ms, which should approximately be the same as it was before we started,',
    'namely', str(round(WasExposureTime * 1000, 3)), 'ms.')
print(80 * '-')
# Final output
print('Saved all images to', SaveDir)
print('Open the RAW files in Fiji as "16-bit Unsigned" with the "Width" and',
    '"Height" given in the DevWare-window and with "Little-Endian byte order"')

[Python: Capture Multiple Exposures]
print(80 * '-')
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time was set to', round(WasExposureTime * 1000, 3), 's')
MinimalExposureTime = int(round(float(input(' '.join(['Please input desired',
                                                      'minimal exposure time',
                                                      '[ms]: '])))))
MaximalExposureTime = int(round(float(input(' '.join(['Please input desired',
                                                      'maximal exposure time',
                                                      '[ms]: '])))))
if MaximalExposureTime > 2080:
    print('The Aptina chip cannot expose for longer than 2 seconds,',
    'capping exposure time there.')
    MaximalExposureTime = 2080
ExposureTimeSteps = int(round(float(input('Please input step width [ms]: '))))
ExposureTimes = [i for i in range(MinimalExposureTime,
                                   MaximalExposureTime + ExposureTimeSteps,
                                   ExposureTimeSteps)]
savedir = os.path.dirname(devware.getoption_str('Capture File'))
StartTime = int(round(time.time()))
print(80 * '-')
print('Saving images to', savedir)
print('Grabbing image with an exposure time of:')
for exp in ExposureTimes:
    apbase.setstate('hw exposure time', str(exp / 1000))
    IsExposureTime = float(apbase.getstate('HW Exposure Time'))
    print(str(ExposureTimes.index(exp) +
               1).rjust(len(str(len(ExposureTimes)))) + '/' +
           str(len(ExposureTimes)) + ': Exposure time of',
           str(int(round(IsExposureTime *
                         1000))).rjust(len(str(MaximalExposureTime))), 'ms')
    #~ time.sleep(0.1)
    # we need to read several images to make sure the settings "stick"
    for i in range(4):
        Return, Image = apbase.Camera().grab_frame()
    # Save the files to some recognisable filename.
    Filename = str(StartTime) + '_exp_' + \
        str(round(exp)).zfill(len(str(MaximalExposureTime))) + 'ms.raw'
    with open(os.path.join(savedir, Filename), 'wb') as f:
        f.write(Image)
print(80 * '-')
apbase.setstate('hw exposure time', str(WasExposureTime))
IsExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Setting exposure time back to', round(IsExposureTime * 1000, 3),
    'ms, which should be the same as it was before we started, namely',
    str(round(WasExposureTime * 1000, 3)), 'ms.')
print(80 * '-')
print('Saved all images to', os.path.join(savedir,
    str(StartTime) + '_exp_????ms.raw'))
print('Open the RAW files in Fiji as "16-bit Unsigned" with the "Width" and',
    '"Height" given in the DevWare-window and with "Little-Endian byte order"')
