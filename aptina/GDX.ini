[Python:]
# from ctypes import *
import os


[Python: Directories]
# Show where DevWare saves stuff
print(80 * '-')
print('Aptina Imaging installation directory')
print(apbase.home)
print('')
print('The directory of the current ini file')
print(os.path.dirname(__IniFileName))
print('')
print('The Still Capture save directory')
print(os.path.dirname(devware.getoption_str('Capture File')))
print('')
print('The Video Record save directory')
print(os.path.dirname(devware.getoption_str('VidCap File')))



[Python: Capture Multiple Gains]
gains = ['1', '2', '4', '8', '16']
savedir = os.path.dirname(devware.getoption_str('Capture File'))
raw_file_name = 'demo'
for gain in gains:
	devware.setstate('hw gain', gain)
	for i in range(4):
		ret,img = apbase.Camera().grab_frame()
	filename = raw_file_name + '_' + gain + 'X.tif'
	with open(os.path.join(savedir, filename), 'wb') as f:
		f.write(img)
devware.setstate('hw gain', '1')



[Python: Message Box]
ret = windll.user32.MessageBoxW(0, 'Click OK or Cancel.',\
	'My Message Box', 0x31)
if ret == 1: print("OK")
if ret == 2: print("Cancel")

[Python: Open File Dialog]
title = 'Select Input File'  #  Window title bar
initialdir = os.path.dirname(devware.getoption_str('Capture File'))
def_extension = 'raw'  #  default file extension
filter = 'RAW Files\0*.raw\0All Files\0*.*\0\0' # file extension filters
filename = OpenFileDialog(title, initialdir, def_extension, filter)
if (filename != None):
	print(filename)



[Python: GPIB Command]
Controller_Address = 0
Device_Primary_Address = 5
Device_Secondary_Address = 0
Timeout = 13
EOT_Flag = 1
EOS_Flag = 0
GPIB_Command = "OUTPUT:STATE ON"
GPIB_Command_Length = 15
GPIB_Library = windll.LoadLibrary("GPIB-32")
GPIB_Device = GPIB_Library.ibdev(Controller_Address,\
	Device_Primary_Address, Device_Secondary_Address, Timeout,\
	EOT_Flag, EOS_Flag)
GPIB_Library.ibwrt(GPIB_Device, c_char_p(GPIB_Command),\
	c_long(GPIB_Command_Length))



[Python: Capture Through HDMI Board RAM]
import os
num_frames = 20
raw_file_name = 'hdmidemo'
print('Starting Capture')
savedir = os.path.dirname(devware.getoption_str('VidCap File'))
#  Start recording to RAM
print('Record to RAM')
apbase.Camera().MEM_CAPTURE = num_frames
print('Record to RAM111')
#  Wait for the frames to accumulate in RAM
print('Wait for frames to accumulate')
while (apbase.Camera().MEM_CAPTURE_PROGRESS < num_frames):
	if (apbase.Camera().MEM_CAPTURE == 0): # unexpected halt
		break
	apbase.delay(33)
#  Read the frames out of HDMI board RAM and save to files
for i in range(num_frames):
	ret,img = apbase.Camera().grab_frame()
	filename = raw_file_name + '_' + ('%04d' % i) + '.raw'
	with open(os.path.join(savedir, filename), 'wb') as f:
		f.write(img)
#  Go back to streaming mode
apbase.Camera().MEM_CAPTURE = 0



[Python: Bayer Thumbnail BMP]
savedir = os.path.dirname(devware.getoption_str('Capture File'))
file_name = 'bayer'
#  Get an image (sensor must be Bayer)
ret, img = apbase.Camera().grab_frame()
#  Save thumbnail
tnname = os.path.join(savedir, file_name + '_tn.bmp')
w = apbase.Camera().sensor.width
h = apbase.Camera().sensor.height
d = apbase.Camera().sensor.pixel_bits
with open(tnname, 'wb') as f:
	f.write(Bayer_thumbnail(img, w, h, d, 320))



[Python: Thread with No Arguments]
import threading
def run():
	devware.setstate('hw gain', '4')
threading.Thread(target=run).start()



[Python: Thread with Arguments]
import threading
def run(gain):
	devware.setstate('hw gain', gain)
threading.Thread(target=run, args=('8')).start()
