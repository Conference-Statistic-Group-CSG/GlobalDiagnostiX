# For names of classes and attributes see the Aptina atalassian website under
# https://aptina.atlassian.net/wiki/display/DEVS/DevWare+Python

# General stuff which we always need. This preset is executed at INI file load
[Python:]
import os
import time


def fijioutput():
    print(80 * '-')
    print('Open the RAW files in Fiji as')
    print('   * "16-bit Unsigned" with')
    print('   * a width of', str(apbase.Camera().sensor.width), 'px,')
    print('   * a height of', str(apbase.Camera().sensor.height), 'px and')
    print('   * with "Little-Endian byte order"')
    print(80 * '-')


[Python: Directories]
# Show where DevWare saves stuff
os.system('clear')
print('Aptina Imaging installation directory')
print(apbase.home)
print
print('The directory of the current ini file')
print(os.path.dirname(__IniFileName))
print
print('The Still Capture save directory')
print(os.path.dirname(devware.getoption_str('Capture File')))
print
print('The Video Record save directory')
print(os.path.dirname(devware.getoption_str('VidCap File')))


[Python: Get current sensor]
# Call relevant apbase commands to see what's connected
os.system('clear')
print('We currently have', apbase.num_cameras, 'cameras connected on the',
    'demo board', apbase.Camera().chip(0).name, '(' + \
    str(apbase.Camera().name) + ').')
print('We are working with a', apbase.Camera().sensor.part_number, 'sensor')


[Python: Set Exposure]
os.system('clear')
print('If working with the AR0132, you need to set the preset [Linear Mode',
    'RAW] before you can use this exposure setting snippet')
# Get input from user
CurrentExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Current exposure time is', round(CurrentExposureTime * 1000, 3), 'ms')
DesiredExposureTime = float(input('Desired Exposure Time [ms]: ')) / 1000
print('Setting Exposure time to', DesiredExposureTime, 's')
apbase.setstate('HW Exposure Time', str(DesiredExposureTime))
CurrentExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time has been set to', round(CurrentExposureTime * 1000, 3),
    'ms')


[Python: Acquire X images with given exp time]
os.system('clear')
# Grab and save current state of chip
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Currently, the chip is exposing for', round(WasExposureTime * 1000, 3),
    'ms, saving this value for later.')

# Ask the user for the desired exposure time and set it
DesiredExposureTime = float(input('Desired exposure time [ms]:'))
if DesiredExposureTime < 3:
    print('Going below 3 ms does not make any sense. Setting 3 ms as',
        'exposure time.')
    DesiredExposureTime = 3
if DesiredExposureTime > 2080:
    print('The Aptina chip cannot expose for longer than 2 seconds,',
    'capping exposure time there.')
    DesiredExposureTime = 2080
apbase.setstate('hw exposure time', str(DesiredExposureTime / 1000.0))
CurrentExposureTime = float(apbase.getstate('HW Exposure Time'))

# Grab some images from the buffer to make sure the exposure time is set
for i in range(5):
    Return, Image = apbase.Camera().grab_frame()
print('Chip set to expose for', round(CurrentExposureTime * 1000, 3), 'ms.')

# Ask for how long we should record? Gives NumberOfImages, fps, etc. If the
# user wants to record more than 7.5 fps inform him of the fact that this
# cannot be done.
RecordingTime = int(input('How long would you like to record images? [s]:'))
NumberOfImages = int(round(RecordingTime * 1000 / DesiredExposureTime))
print('You want to grab images with', DesiredExposureTime, 'ms exposure time',
    'corresponding to', round(1 / (DesiredExposureTime / 1000), 3), 'fps.')
print('During', RecordingTime, 's, this will give',
    int(round(RecordingTime * 1000 / DesiredExposureTime)),
    'images in total.')
if 1 / (DesiredExposureTime / 1000) > 8:
    print('I reduce the amount of recorded images to match the maximally',
        'achievable 7.5 fpsso that you do not have to wait for',
        round(NumberOfImages / 7.5, 3), 's (instead of the requested',
        RecordingTime, 's).')
    NumberOfImages = int(round(RecordingTime * 8))  # fps
    print('You could go as high as 134 ms with the exposure time to match',
        'exposure and readout time.')
    time.sleep(1)

# Prepare output directory and set it in DevWareX
Timer = int(time.time())
Suffix = str(int(DesiredExposureTime)).zfill(4) + 'ms_' + \
    str(NumberOfImages) + 'img'
SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number,
                       'ImageSeries_' + str(Timer) + '_' + Suffix)
try:
    os.makedirs(SaveDir)
except FileExistsError:
    print(SaveDir, 'already exists, proceeding')
devware.setoption_str('Capture File', SaveDir)
print('Images will be written to', devware.getoption_str('Capture File'))

# Save images and do some timing on the way
StartTime = time.time()
for i in range(NumberOfImages):
    s = time.time()
    # Grab the frame
    Return, Image = apbase.Camera().grab_frame()
    # Save it to a nicely named file
    Filename = Suffix + '_' + str(i + 1).zfill(len(str(NumberOfImages))) +\
        '.raw'
    with open(os.path.join(SaveDir, Filename), 'wb') as f:
        f.write(Image)
    e = time.time()
    # Log some stuff to the console
    print(str(i).zfill(len(str(NumberOfImages))) + '/' +
        str(NumberOfImages) + ': Exposing for', round(DesiredExposureTime),
        'ms and saving @', round((1 / (e - s)), 1), 'fps.')
print(80 * '-')
EndTime = time.time()
# Inform the user about what happened.
print('The whole process took me', round(EndTime - StartTime, 3),
       's. You requested', RecordingTime, 's.')
print(80 * '-')

# Get the sensor back to the initial state
apbase.setstate('hw exposure time', str(WasExposureTime))
IsExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Setting exposure time back to', round(IsExposureTime * 1000, 3),
    'ms, which should be the same as it was before we started, namely',
    str(round(WasExposureTime * 1000, 3)), 'ms.')
print(80 * '-')

# Final output
fijioutput()


[Python: Acquire X images over a given rail distance]
os.system('clear')
# Grab and save current state of chip
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Currently, the chip is exposing for', round(WasExposureTime * 1000, 3),
    'ms, saving this value for later.')

# Ask the user for the desired exposure time and set it
DesiredExposureTime = float(input('Desired exposure time [ms]: '))
apbase.setstate('hw exposure time', str(DesiredExposureTime / 1000.0))
# Grab some images from the buffer to make the exposure time stick
for i in range(5):
    Return, Image = apbase.Camera().grab_frame()
CurrentExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time set to', round(CurrentExposureTime * 1000, 3), 'ms.')

# Ask the user for what distance he/she'd like to record. And for how many
# steps, with which lens, at what focus and what aperture, so we can write this
# info in the files
Lens = input('Which lens are you using?: ')
Focus = float(input('What is the focus value on the lens? (0 if none): '))
Aperture = float(input('What is the aperture? (0 if none): '))

print
Position = []
Position.append(float(input(' '.join(['Where do you want to *start* on the',
    'rail? [mm]: ']))))
Position.append(float(input(' '.join(['Where do you want to *stop* on the',
    'rail? [mm]: ']))))
# Round the positions to the nearest mm. And make the positions 'int', so we
# can use them later on in the range(Position[0], Position[1]) calls
Position = [int(round(i)) for i in Position]

if Position[0] == Position[1]:
    print('You have to move at least a bit, i.e. the starting and end',
        'Position have to be different. Increasing the total distance by 1',
        'cm.')
    Position[1] += 10
elif Position[0] >= Position[1]:
    # Flip start and end, so that we always start close to the Scintillator
    Position[0], Position[1] = Position[1], Position[0]

StepNumber = int(input(' '.join(['How many steps would you like to image',\
    '*between*', str(Position[0]), 'mm and', str(Position[1]), 'mm?: '])))
if StepNumber > 25:
    print('Are you sure you want to record', StepNumber, 'steps?')
    StepNumber = int(input(' '.join(['If you want, you can enter a smaller',
        'number of steps...'])))

if int(round(Position[1] - Position[0]) / StepNumber) < 1:
    print('These settings would lead to steps smaller than 1mm, I am',
        'decreasing the number of steps from', StepNumber, 'to',
        int(Position[1] - Position[0]), 'so that we can do these steps with a',
        '1mm step width between each shot.')
    StepNumber = Position[1] - Position[0]

print(80 * '-')
# Prepare output directory and set it in DevWareX
# Grab the current second to make the folders distinguishable, even for exactly
# the same parameters
Timer = int(time.time())
Suffix = apbase.Camera().sensor.part_number + '_' + \
    str(apbase.Camera().sensor.width) + 'x' + \
    str(apbase.Camera().sensor.height) + '_' + Lens + '_' + str(Focus) + \
    '_' + str(Aperture) + 'f_' + \
    str(int(CurrentExposureTime * 1000)).zfill(3) + 'ms_' + \
    str(Position[0]).zfill(3) + 'mm_to' + str(Position[1]).zfill(3) + 'mm'

SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number,
                       'LensSeries_' + str(Lens), str(Timer) + '_' + Suffix)
try:
    os.makedirs(SaveDir)
except FileExistsError:
    print(SaveDir, 'already exists, proceeding')
devware.setoption_str('Capture File', SaveDir)
print('Saving the', StepNumber, 'Images to',
    devware.getoption_str('Capture File'))
print(80 * '-')

# Step through the chosen positions
input(' '.join(['Move the slider to', str(Position[0]), 'mm and press',
    '"Enter" to continue']))
SleepyTime = 8

RailPositions = [i for i in range(Position[0], Position[1] + 1,
                 int(round((Position[1] - Position[0]) / (StepNumber + 1))))]

for i, CurrentPosition in enumerate(RailPositions):
    print(10 * '-', 'Step', str(i + 1) + '/' + str(len(RailPositions)),
        50 * '-')
    print ('Move slider to', CurrentPosition, 'mm and get ready to expose',
        'with', round(CurrentExposureTime * 1000, 3), 'ms')
    print('Ready ',)
    time.sleep(SleepyTime / 3)
    print('Set ',)
    time.sleep(SleepyTime / 3)
    print('Go!')
    time.sleep(SleepyTime / 3)
    Return, Image = apbase.Camera().grab_frame()
    # Save it to a nicely named file
    Filename = Suffix + '_' + str(CurrentPosition).zfill(3) + 'mm.raw'
    with open(os.path.join(SaveDir, Filename), 'wb') as f:
        f.write(Image)
    print ('Image saved to', os.path.basename(Filename))

print(80 * '-')
# Get the sensor back to the initial state
apbase.setstate('hw exposure time', str(WasExposureTime))
IsExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Setting exposure time back to', round(IsExposureTime * 1000, 3),
    'ms, which should approximately be the same as it was before we started,',
    'namely', str(round(WasExposureTime * 1000, 3)), 'ms.')
print(80 * '-')
# Final output
fijioutput()

[Python: Capture Exposure time range]
os.system('clear')
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time was set to', round(WasExposureTime * 1000, 3), 'ms')
MinimalExposureTime = int(round(float(input(' '.join(['Please input desired',
                                                      'minimal exposure time',
                                                      '[ms]: '])))))
MaximalExposureTime = int(round(float(input(' '.join(['Please input desired',
                                                      'maximal exposure time',
                                                      '[ms]: '])))))
if MaximalExposureTime > 2080:
    print('The Aptina chip cannot expose for longer than 2 seconds,',
    'capping exposure time there.')
    MaximalExposureTime = 2080
ExposureTimeStep = int(round(float(input('Please input step width [ms]: '))))
if ExposureTimeStep == 0:
    # User entered a value that was rounded off to 0
    ExposureTimeStep = 1
print('We cannot set fractions of ms, so your inputs were rounded to the',
    'next integer. We are using')
print('   * a minimal exposure time of', MinimalExposureTime, 'ms')
print('   * a maximal exposure time of', MaximalExposureTime, 'ms')
print('   * and exposure time steps of', ExposureTimeStep, 'ms')
ExposureTimes = [i for i in range(MinimalExposureTime,
                                   MaximalExposureTime + ExposureTimeStep,
                                   ExposureTimeStep)]
StartTime = int(round(time.time()))
SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number,
                       'ExposureSeries_' + str(StartTime) + '_' + \
                       str(MinimalExposureTime) + 'ms_to_' + \
                       str(MaximalExposureTime) + 'ms')
try:
    os.makedirs(SaveDir)
except FileExistsError:
    print(SaveDir, 'already exists, proceeding')
print(80 * '-')
print('Saving images to', SaveDir)
print('Grabbing image with an exposure time of:')
for exp in ExposureTimes:
    apbase.setstate('hw exposure time', str(exp / 1000))
    IsExposureTime = round(float(apbase.getstate('hw exposure time')) * 1000,
                           2)
    print(str(ExposureTimes.index(exp) +
               1).rjust(len(str(len(ExposureTimes)))) + '/' +
           str(len(ExposureTimes)) + ': Exposure time of',
           '{:.2f}'.format(IsExposureTime), 'ms')
    # we need to read some images to clear the buffer
    for i in range(5):
        Return, Image = apbase.Camera().grab_frame()
    # Save the files to some recognisable filename.
    # use 'format' to have trailing and 'zfill' to have leading zeroes
    Filename = str(StartTime) + '_exp_' + \
        '{:.2f}'.format(IsExposureTime).zfill(3 + \
                                              len(str(MaximalExposureTime))) +\
        'ms.raw'
    with open(os.path.join(SaveDir, Filename), 'wb') as f:
        f.write(Image)
print(80 * '-')
apbase.setstate('hw exposure time', str(WasExposureTime))
IsExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Setting exposure time back to', round(IsExposureTime * 1000, 3),
    'ms, which should be the same as it was before we started, namely',
    str(round(WasExposureTime * 1000, 3)), 'ms.')
fijioutput()


[Python: Lens Sensor Iteration]
os.system('clear')

# Grab and save current state of chip
print('Working with the sensor', apbase.Camera().sensor.part_number,
    'at the moment')
ExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Current (automatic) exposure time is', round(ExposureTime * 1000, 3),
    'ms')
Distance = float(input(' '.join(['What is the distance between the',
    '"scintillator" and the *head* board? [mm]: '])))
Lens = input('Which lens did you mount?: ')
Focus = float(input(' '.join(['What is the focal distance you set on the',
    'lens? Enter "0" if none given and set to "best" focus for covering the',
    'full star: '])))
Aperture = float(input(' '.join(['What is the aperture you set on the lens?',
    'Enter "0" if none can be set: '])))

# Prepare output directory and set it in DevWareX
SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number, 'LensIteration')
try:
    os.makedirs(SaveDir)
except FileExistsError:
    print(SaveDir, 'already exists, proceeding')
devware.setoption_str('Capture File', SaveDir)

FileName = apbase.Camera().sensor.part_number + '_' + \
    str(apbase.Camera().sensor.width) + 'x' + \
    str(apbase.Camera().sensor.height) + '_' + str(Lens) + '_' + \
    str(Distance) + 'mm_' + str(Focus) + '_' + str(Aperture) + 'f_' +  \
    str(int(ExposureTime * 1000)).zfill(3) + 'ms.raw'

print('Saving the focus and FOV image as', FileName, 'to',
    devware.getoption_str('Capture File'))

print(80 * '-')

# Grab some images from the buffer to make sure we got a nice one to save
for i in range(5):
    Return, Image = apbase.Camera().grab_frame()
# Grab another one and save it to a nicely named file
Return, Image = apbase.Camera().grab_frame()
with open(os.path.join(SaveDir, FileName), 'wb') as f:
    f.write(Image)
print ('Written image to', FileName)
print(80 * '-')


[Python: Focus-Distance-Test for Ivan]
os.system('clear')
print('Did you set to auto-exposure?')
print('Did you set to biggest possible aperture?')
print()

Lens = input('Lens? ')
DistanceBase = float(input(' '.join(['Distance of base to frame (read from',
                                     'ruler, without calculating off 5mm edge',
                                     '[cm]? '])))*10
DistanceSlider = float(input('Position of slider on base [cm]? '))*10
# Calculating CMOS to Scintillator-Distance, based on empirically measured
# length and correction for 5mm zero-length-shift of the office ruler.
DistanceCMOS = DistanceBase + DistanceSlider + 28 + 5  ## empirical number

SaveDir = os.path.join('/scratch', 'tmp', 'DevWareX', 'FocusDistance',
                       apbase.Camera().sensor.part_number)
try:
    os.makedirs(SaveDir)
except FileExistsError:
    pass
devware.setoption_str('Capture File', SaveDir)

FileName = apbase.Camera().sensor.part_number + '_' + \
    str(Lens) + '_' + str(apbase.Camera().sensor.width) + 'x' + \
    str(apbase.Camera().sensor.height) + '_' + \
    str(int(round(DistanceCMOS,1))).zfill(3) + 'mmScintToCMOS_' + \
    str(int(float(apbase.getstate('HW Exposure Time')) * 1000)).zfill(3) + \
    'ms.raw'

# Grab some images from the buffer to make sure we have nice one to save
frames = 5
for i in range(frames):
    Return, Image = apbase.Camera().grab_frame()
    print('Clearing frame buffer', str(i) + '/' + str(frames))

# Grab the next image and save it to a nicely named file
Return, Image = apbase.Camera().grab_frame()
with open(os.path.join(SaveDir, FileName), 'wb') as f:
    f.write(Image)
print('Written image as', FileName, 'to',
       devware.getoption_str('Capture File'))
print(80 * '-')
