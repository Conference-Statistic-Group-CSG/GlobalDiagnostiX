# INI file for Ivans Master thesis.
# We need to set
#   * the experiment number,
#   * the modality and
#   * the output parameters of the source (kv, mAs and the like)

# For names of classes and attributes see the Aptina atalassian website under
# https://aptina.atlassian.net/wiki/display/DEVS/DevWare+Python

# Probably it would be a good idea to reset all the different sensors to their
# initial state at the beginning of the INI file.
# Since I was not able to do this in pure Python under the [Python:] preset at
# the end of the file, I am just copying the relevant lines from their
# respective INI files.

[MT9M001: Start]
## MT9M001: Reset
REG = 0x0D, 1
REG = 0x0D, 0
## MT9M001: Monochrome Initialization (copied from MT9M001-ES3.ini)
BITFIELD = 0x29, 0x0001, 0
REG = 0x3F, 0x0003
REG = 0x40, 0x0006
REG = 0x4A, 0x0060
REG = 0x4E, 0x000C


[AR0130: Start]
## AR0130: Linear Mode Full Resolution (copied from AR0130-REV1.ini)
STATE = Sensor Reset, 1
DELAY = 200
STATE = Sensor Reset, 0
FIELD_WR = RESET_REGISTER, 1
FIELD_WR = RESET_REGISTER, 0x10D8
REG = 0x3088, 0x8000
REG = 0x3086, 0x225
REG = 0x3086, 0x5050
REG = 0x3086, 0x2D26
REG = 0x3086, 0x828
REG = 0x3086, 0xD17
REG = 0x3086, 0x926
REG = 0x3086, 0x28
REG = 0x3086, 0x526
REG = 0x3086, 0xA728
REG = 0x3086, 0x725
REG = 0x3086, 0x8080
REG = 0x3086, 0x2917
REG = 0x3086, 0x525
REG = 0x3086, 0x40
REG = 0x3086, 0x2702
REG = 0x3086, 0x1616
REG = 0x3086, 0x2706
REG = 0x3086, 0x1736
REG = 0x3086, 0x26A6
REG = 0x3086, 0x1703
REG = 0x3086, 0x26A4
REG = 0x3086, 0x171F
REG = 0x3086, 0x2805
REG = 0x3086, 0x2620
REG = 0x3086, 0x2804
REG = 0x3086, 0x2520
REG = 0x3086, 0x2027
REG = 0x3086, 0x17
REG = 0x3086, 0x1E25
REG = 0x3086, 0x20
REG = 0x3086, 0x2117
REG = 0x3086, 0x1028
REG = 0x3086, 0x51B
REG = 0x3086, 0x1703
REG = 0x3086, 0x2706
REG = 0x3086, 0x1703
REG = 0x3086, 0x1747
REG = 0x3086, 0x2660
REG = 0x3086, 0x17AE
REG = 0x3086, 0x2500
REG = 0x3086, 0x9027
REG = 0x3086, 0x26
REG = 0x3086, 0x1828
REG = 0x3086, 0x2E
REG = 0x3086, 0x2A28
REG = 0x3086, 0x81E
REG = 0x3086, 0x831
REG = 0x3086, 0x1440
REG = 0x3086, 0x4014
REG = 0x3086, 0x2020
REG = 0x3086, 0x1410
REG = 0x3086, 0x1034
REG = 0x3086, 0x1400
REG = 0x3086, 0x1014
REG = 0x3086, 0x20
REG = 0x3086, 0x1400
REG = 0x3086, 0x4013
REG = 0x3086, 0x1802
REG = 0x3086, 0x1470
REG = 0x3086, 0x7004
REG = 0x3086, 0x1470
REG = 0x3086, 0x7003
REG = 0x3086, 0x1470
REG = 0x3086, 0x7017
REG = 0x3086, 0x2002
REG = 0x3086, 0x1400
REG = 0x3086, 0x2002
REG = 0x3086, 0x1400
REG = 0x3086, 0x5004
REG = 0x3086, 0x1400
REG = 0x3086, 0x2004
REG = 0x3086, 0x1400
REG = 0x3086, 0x5022
REG = 0x3086, 0x314
REG = 0x3086, 0x20
REG = 0x3086, 0x314
REG = 0x3086, 0x50
REG = 0x3086, 0x2C2C
REG = 0x3086, 0x2C2C
REG = 0x309E, 0x0000
REG = 0x30E4, 0x6372
REG = 0x30E2, 0x7253
REG = 0x30E0, 0x5470
REG = 0x30E6, 0xC4CC
REG = 0x30e8, 0x8050
DELAY = 200
FIELD_WR = OPERATION_MODE_CTRL, 0x29
REG = 0x301E, 0x00C8
REG = 0x3EDA, 0x0F03
REG = 0x3EDE, 0xC005
REG = 0x3ED8, 0x09EF
REG = 0x3EE2, 0xA46B
REG = 0x3EE0, 0x047D
REG = 0x3EDC, 0x0070
REG = 0x3044, 0x0404
REG = 0x3EE6, 0x4303
REG = 0x3EE4, 0xD208
REG = 0x3ED6, 0x00BD
REG = 0x30B0, 0x1300
REG = 0x30D4, 0xE007
REG = 0x3012, 0x02A0
FIELD_WR = DIGITAL_BINNING, 0x0000
FIELD_WR = Y_ADDR_START, 2
FIELD_WR = X_ADDR_START, 0
FIELD_WR = Y_ADDR_END, 0x03C1
FIELD_WR = X_ADDR_END, 0x04FF
FIELD_WR = FRAME_LENGTH_LINES, 0x03DE
FIELD_WR = LINE_LENGTH_PCK, 0x0672
// COMMENT BY DAVID 26.6.2014
// The line below was this. Since we enable the parallel mode for the AR0132,
// we also do this for the AR0130, disregarding the IF_SERIAL. Hope that works
//thiswasoneline
// IF_SERIAL = 0xCC, 0x13, 0xF0, 8:16, == 0x0C,
// LOAD = Enable Serial HiSpi Mode,
// ELSELOAD = Enable Parallel Mode
//thiswasoneline
REG = 0x301A, 0x10D8
REG = 0x31D0, 0x1
FIELD_WR = VT_SYS_CLK_DIV, 0x0002
FIELD_WR = VT_PIX_CLK_DIV, 0x0004
FIELD_WR = PRE_PLL_CLK_DIV, 0x0002
FIELD_WR = PLL_MULTIPLIER, 0x002C
FIELD_WR = DIGITAL_TEST, PLL_COMPLETE_BYPASS, 0x0000
DELAY = 100
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
// COMMENT BY DAVID 26.6.2014
STATE = Defect Enable, 1
STATE = Detect Master Clock, 1
STATE = True Black Enable, 1
FIELD_WR = RESET_REGISTER, STREAM, 0x0001


[AR0132: Start]
## AR0132: Linear Mode RAW (copied from AR0132-REV6.ini)
STATE = Sensor Reset, 1
DELAY = 200
STATE = Sensor Reset, 0
FIELD_WR = RESET_REGISTER, 1
FIELD_WR = RESET_REGISTER, 0x10D8
DELAY = 200
REG = 0x3088, 0x8000
REG = 0x3086, 0x0025
REG = 0x3086, 0x5050
REG = 0x3086, 0x2d26
REG = 0x3086, 0x0828
REG = 0x3086, 0x0d17
REG = 0x3086, 0x0926
REG = 0x3086, 0x0028
REG = 0x3086, 0x0526
REG = 0x3086, 0xa728
REG = 0x3086, 0x0725
REG = 0x3086, 0x8080
REG = 0x3086, 0x2925
REG = 0x3086, 0x0040
REG = 0x3086, 0x2700
REG = 0x3086, 0x1616
REG = 0x3086, 0x2700
REG = 0x3086, 0x1f17
REG = 0x3086, 0x3626
REG = 0x3086, 0xa617
REG = 0x3086, 0x0326
REG = 0x3086, 0xa417
REG = 0x3086, 0x1f28
REG = 0x3086, 0x0526
REG = 0x3086, 0x2028
REG = 0x3086, 0x0425
REG = 0x3086, 0x2020
REG = 0x3086, 0x2700
REG = 0x3086, 0x171d
REG = 0x3086, 0x2500
REG = 0x3086, 0x2017
REG = 0x3086, 0x1219
REG = 0x3086, 0x1703
REG = 0x3086, 0x2700
REG = 0x3086, 0x1728
REG = 0x3086, 0x2805
REG = 0x3086, 0x1710
REG = 0x3086, 0x2706
REG = 0x3086, 0x1708
REG = 0x3086, 0x2660
REG = 0x3086, 0x175a
REG = 0x3086, 0x2317
REG = 0x3086, 0x1122
REG = 0x3086, 0x1741
REG = 0x3086, 0x2500
REG = 0x3086, 0x9027
REG = 0x3086, 0x0026
REG = 0x3086, 0x1828
REG = 0x3086, 0x002e
REG = 0x3086, 0x2a28
REG = 0x3086, 0x081c
REG = 0x3086, 0x1470
REG = 0x3086, 0x7003
REG = 0x3086, 0x1470
REG = 0x3086, 0x7004
REG = 0x3086, 0x1470
REG = 0x3086, 0x7005
REG = 0x3086, 0x1470
REG = 0x3086, 0x7009
REG = 0x3086, 0x170c
REG = 0x3086, 0x0014
REG = 0x3086, 0x0020
REG = 0x3086, 0x0014
REG = 0x3086, 0x0050
REG = 0x3086, 0x0314
REG = 0x3086, 0x0020
REG = 0x3086, 0x0314
REG = 0x3086, 0x0050
REG = 0x3086, 0x0414
REG = 0x3086, 0x0020
REG = 0x3086, 0x0414
REG = 0x3086, 0x0050
REG = 0x3086, 0x0514
REG = 0x3086, 0x0020
REG = 0x3086, 0x2405
REG = 0x3086, 0x1400
REG = 0x3086, 0x5001
REG = 0x3086, 0x2550
REG = 0x3086, 0x502d
REG = 0x3086, 0x2608
REG = 0x3086, 0x280d
REG = 0x3086, 0x1709
REG = 0x3086, 0x2600
REG = 0x3086, 0x2805
REG = 0x3086, 0x26a7
REG = 0x3086, 0x2807
REG = 0x3086, 0x2580
REG = 0x3086, 0x8029
REG = 0x3086, 0x2500
REG = 0x3086, 0x4027
REG = 0x3086, 0x0016
REG = 0x3086, 0x1627
REG = 0x3086, 0x0020
REG = 0x3086, 0x1736
REG = 0x3086, 0x26a6
REG = 0x3086, 0x1703
REG = 0x3086, 0x26a4
REG = 0x3086, 0x171f
REG = 0x3086, 0x2805
REG = 0x3086, 0x2620
REG = 0x3086, 0x2804
REG = 0x3086, 0x2520
REG = 0x3086, 0x2027
REG = 0x3086, 0x0017
REG = 0x3086, 0x1d25
REG = 0x3086, 0x0020
REG = 0x3086, 0x1712
REG = 0x3086, 0x1a17
REG = 0x3086, 0x0327
REG = 0x3086, 0x0017
REG = 0x3086, 0x2828
REG = 0x3086, 0x0517
REG = 0x3086, 0x1027
REG = 0x3086, 0x0617
REG = 0x3086, 0x0826
REG = 0x3086, 0x6017
REG = 0x3086, 0x9827
REG = 0x3086, 0x0017
REG = 0x3086, 0x1525
REG = 0x3086, 0x0090
REG = 0x3086, 0x2700
REG = 0x3086, 0x2618
REG = 0x3086, 0x2800
REG = 0x3086, 0x2e2a
REG = 0x3086, 0x2808
REG = 0x3086, 0x1d05
REG = 0x3086, 0x1470
REG = 0x3086, 0x7009
REG = 0x3086, 0x1720
REG = 0x3086, 0x1400
REG = 0x3086, 0x2024
REG = 0x3086, 0x1400
REG = 0x3086, 0x5002
REG = 0x3086, 0x2550
REG = 0x3086, 0x502d
REG = 0x3086, 0x2608
REG = 0x3086, 0x280d
REG = 0x3086, 0x1709
REG = 0x3086, 0x2600
REG = 0x3086, 0x2805
REG = 0x3086, 0x26a7
REG = 0x3086, 0x2807
REG = 0x3086, 0x2580
REG = 0x3086, 0x8029
REG = 0x3086, 0x2500
REG = 0x3086, 0x4027
REG = 0x3086, 0x0016
REG = 0x3086, 0x1627
REG = 0x3086, 0x0017
REG = 0x3086, 0x3626
REG = 0x3086, 0xa617
REG = 0x3086, 0x0326
REG = 0x3086, 0xa417
REG = 0x3086, 0x1f28
REG = 0x3086, 0x0526
REG = 0x3086, 0x2028
REG = 0x3086, 0x0425
REG = 0x3086, 0x2020
REG = 0x3086, 0x2700
REG = 0x3086, 0x171d
REG = 0x3086, 0x2500
REG = 0x3086, 0x2021
REG = 0x3086, 0x1712
REG = 0x3086, 0x1b17
REG = 0x3086, 0x0327
REG = 0x3086, 0x0017
REG = 0x3086, 0x2828
REG = 0x3086, 0x0517
REG = 0x3086, 0x1027
REG = 0x3086, 0x0617
REG = 0x3086, 0x0826
REG = 0x3086, 0x6017
REG = 0x3086, 0x9827
REG = 0x3086, 0x0017
REG = 0x3086, 0x1525
REG = 0x3086, 0x0090
REG = 0x3086, 0x2700
REG = 0x3086, 0x2618
REG = 0x3086, 0x2800
REG = 0x3086, 0x2e2a
REG = 0x3086, 0x2808
REG = 0x3086, 0x1e17
REG = 0x3086, 0x0a05
REG = 0x3086, 0x1470
REG = 0x3086, 0x7009
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1614
REG = 0x3086, 0x0020
REG = 0x3086, 0x2414
REG = 0x3086, 0x0050
REG = 0x3086, 0x2b2b
REG = 0x3086, 0x2c2c
REG = 0x3086, 0x2c2c
REG = 0x3086, 0x2c00
REG = 0x3086, 0x0225
REG = 0x3086, 0x5050
REG = 0x3086, 0x2d26
REG = 0x3086, 0x0828
REG = 0x3086, 0x0d17
REG = 0x3086, 0x0926
REG = 0x3086, 0x0028
REG = 0x3086, 0x0526
REG = 0x3086, 0xa728
REG = 0x3086, 0x0725
REG = 0x3086, 0x8080
REG = 0x3086, 0x2917
REG = 0x3086, 0x0525
REG = 0x3086, 0x0040
REG = 0x3086, 0x2700
REG = 0x3086, 0x1616
REG = 0x3086, 0x2700
REG = 0x3086, 0x1736
REG = 0x3086, 0x26a6
REG = 0x3086, 0x1703
REG = 0x3086, 0x26a4
REG = 0x3086, 0x171f
REG = 0x3086, 0x2805
REG = 0x3086, 0x2620
REG = 0x3086, 0x2804
REG = 0x3086, 0x2520
REG = 0x3086, 0x2027
REG = 0x3086, 0x0017
REG = 0x3086, 0x1e25
REG = 0x3086, 0x0020
REG = 0x3086, 0x2117
REG = 0x3086, 0x121b
REG = 0x3086, 0x1703
REG = 0x3086, 0x2700
REG = 0x3086, 0x1728
REG = 0x3086, 0x2805
REG = 0x3086, 0x1710
REG = 0x3086, 0x2706
REG = 0x3086, 0x1708
REG = 0x3086, 0x2660
REG = 0x3086, 0x1798
REG = 0x3086, 0x2700
REG = 0x3086, 0x1715
REG = 0x3086, 0x2500
REG = 0x3086, 0x9027
REG = 0x3086, 0x0026
REG = 0x3086, 0x1828
REG = 0x3086, 0x002e
REG = 0x3086, 0x2a28
REG = 0x3086, 0x081e
REG = 0x3086, 0x0831
REG = 0x3086, 0x1440
REG = 0x3086, 0x4014
REG = 0x3086, 0x2020
REG = 0x3086, 0x1410
REG = 0x3086, 0x1034
REG = 0x3086, 0x1400
REG = 0x3086, 0x1014
REG = 0x3086, 0x0020
REG = 0x3086, 0x1400
REG = 0x3086, 0x4013
REG = 0x3086, 0x1802
REG = 0x3086, 0x1470
REG = 0x3086, 0x7004
REG = 0x3086, 0x1470
REG = 0x3086, 0x7003
REG = 0x3086, 0x1470
REG = 0x3086, 0x7017
REG = 0x3086, 0x2002
REG = 0x3086, 0x1400
REG = 0x3086, 0x2002
REG = 0x3086, 0x1400
REG = 0x3086, 0x5004
REG = 0x3086, 0x1400
REG = 0x3086, 0x2004
REG = 0x3086, 0x1400
REG = 0x3086, 0x5022
REG = 0x3086, 0x0314
REG = 0x3086, 0x0020
REG = 0x3086, 0x0314
REG = 0x3086, 0x0050
REG = 0x3086, 0x2c2c
REG = 0x3086, 0x2c2c
REG = 0x309E, 0x019A
REG = 0x301E, 0x00C8
REG = 0x3EDA, 0x0F03
REG = 0x3EDE, 0xC005
REG = 0x3ED8, 0x09DF
REG = 0x3EE2, 0xA46B
REG = 0x3EE0, 0x067D
REG = 0x3EDC, 0x0070
REG = 0x3044, 0x0404
REG = 0x3EE6, 0x8303
REG = 0x3EE4, 0xD208
REG = 0x3ED6, 0x00BB
REG = 0x30E4, 0x6372
REG = 0x30E2, 0x7253
REG = 0x30E0, 0x5470
REG = 0x30E6, 0xC4CC
REG = 0x30E8, 0x8050
DELAY = 200
FIELD_WR = RESET_REGISTER, 0x10D8
FIELD_WR = OPERATION_MODE_CTRL, 0x29
REG = 0x30B0, 0x1300
REG = 0x30D4, 0xE007
REG = 0x30BA, 0x0008
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
DELAY = 200
FIELD_WR = RESET_REGISTER, STREAM, 0x0000
DELAY = 200
STATE = Filter, 0
STATE = WB Custom m00, 165
STATE = WB Custom m01, -75
STATE = WB Custom m02, 9
STATE = WB Custom m10, -6
STATE = WB Custom m11, 101
STATE = WB Custom m12, 5
STATE = WB Custom m20, -2
STATE = WB Custom m21, -84
STATE = WB Custom m22, 186
STATE = Color Correction, 1
STATE = True Black Enable, 1
STATE = True Black Level, 200
STATE = WB Adjust Gains, 0
STATE = White Balance, 1
FIELD_WR = BLUE_GAIN, 0x003F
REG = 0x3012, 0x02A0
FIELD_WR = DIGITAL_BINNING, 0x0000
FIELD_WR = Y_ADDR_START, 2
FIELD_WR = X_ADDR_START, 0
FIELD_WR = Y_ADDR_END, 0x03C1
FIELD_WR = X_ADDR_END, 0x04FF
FIELD_WR = FRAME_LENGTH_LINES, 0x03DE
FIELD_WR = LINE_LENGTH_PCK, 0x0672
REG = 0x301A, 0x10D8
REG = 0x31D0, 0x1
FIELD_WR = VT_SYS_CLK_DIV, 0x0002
FIELD_WR = VT_PIX_CLK_DIV, 0x0004
FIELD_WR = PRE_PLL_CLK_DIV, 0x0002
FIELD_WR = PLL_MULTIPLIER, 0x002C
FIELD_WR = DIGITAL_TEST, PLL_COMPLETE_BYPASS, 0x0000
DELAY = 100
REG = 0x301A, 0x10DC
STATE = Defect Enable, 1
STATE = Detect Master Clock, 1
STATE = True Black Enable, 1
STATE = True Black Level, 200
FIELD_WR = EMBEDDED_DATA_CTRL, EMBEDDED_STATS_EN, 0x0001
FIELD_WR = EMBEDDED_DATA_CTRL, EMBEDDED_DATA, 0x0001
STATE = Filter, 0
STATE = WB Custom m00, 165
STATE = WB Custom m01, -75
STATE = WB Custom m02, 9
STATE = WB Custom m10, -6
STATE = WB Custom m11, 101
STATE = WB Custom m12, 5
STATE = WB Custom m20, -2
STATE = WB Custom m21, -84
STATE = WB Custom m22, 186
STATE = Color Correction, 1
STATE = True Black Enable, 1
STATE = True Black Level, 200
STATE = WB Adjust Gains, 0
STATE = White Balance, 1
FIELD_WR = BLUE_GAIN, 0x003F
REG = 0x3100, 0x001B
REG = 0x3112, 0x029F
REG = 0x3114, 0x008C
REG = 0x3116, 0x02C0
REG = 0x3118, 0x005B
REG = 0x3102, 0x0384
REG = 0x3104, 0x1000
REG = 0x3126, 0x0080
REG = 0x311C, 0x03DD
REG = 0x311E, 0x0002
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
FIELD_WR = RESET_REGISTER, STREAM, 0x0000
FIELD_WR = OPERATION_MODE_CTRL, 0x29
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
FIELD_WR = RESET_REGISTER, STREAM, 0x0000
REG = 0x3100, 0x001A
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
IMAGE = 0, 0, BAYER-12
STATE = Auto Exposure, 0
STATE = True Black Enable, 0
STATE = Aperture Enable, 0
STATE = Color Correction, 0
STATE = White Balance, 0
STATE = Filter, 3
STATE = Defect Enable, 0
FIELD_WR = BLUE_GAIN, 0x0020
FIELD_WR = GREEN1_GAIN, 0x0020
FIELD_WR = GREEN2_GAIN, 0x0020
FIELD_WR = RED_GAIN, 0x0020
FIELD_WR = GLOBAL_GAIN, 0x0020

[Python: Print all registers]
for r in reg:
    print(r.symbol)
    for b in r:
        print('    ', b.symbol)


[Python: Ask the user something]
text = 'Here are some choices'
things = ['Heart', 'Body', 'Soul']
Answer = AskUser(text, things)
print('You want', Answer)


[Python: Set exposure time]
os.system('clear')
was = float(apbase.getstate('HW Exposure Time')) * 1000
print('CMOS is currently set to expose for', round(was, 2), 'ms')
should = float(input('Desired exposure time [ms]:'))
SetExposureTime(should, True)


[Python: Experiment]
os.system('clear')
# Setting up some standard parameters
## Use current POSIX time as experiment ID
ExperimentID = round(time.time()) - 1401000000
## Set base directory
if 'Darwin' in platform.system():
    BaseDirectory = os.path.join(os.environ['HOME'], 'Pictures', 'DevWareX')
elif 'Linux' in platform.system():
    BaseDirectory = os.path.join('/scratch', 'tmp', 'DevWareX')
devware.setoption_str('Capture File', BaseDirectory)

# Show where DevWare saves the stuff and other directories
print('We are performing experiment', ExperimentID)
print('DevWare is running from', apbase.home)
print('The current INI file is loaded from', os.path.dirname(__IniFileName))
print('Images will be saved to folders under',
    devware.getoption_str('Capture File'))
print()

# Get experiment parameters
## Select Scintillator
ScintillatorChoices = ['Toshiba',           # RS12C0907-20, CsI/Tl, 0.2 mm
                       'Pingseng',          # A-200200T, Cs:I, 350 um
                       'Hamamatsu',         # not here yet, Cs:I
                       'AppScinTech-HB',    # SC12780-13, particulate phosphor,
                                            # 120mg/cm²
                       'AppScinTech-HE',    # SC23892-13, see above
                       'AppScinTech-MED']   # SC23891-13, see above
Scintillator = AskUser('Which scintillator is mounted?', ScintillatorChoices)

## Input Lens
LensChoices = ['Lensation-CHR6020',
               'Lensation-CM6014N3',
               'Lensation-CHR4020',
               'Lensation-CY0614']
Lens = AskUser('Which lens did you mount?', LensChoices)

## Select modality
Modalities = ['Abdomen',
              'Foot',
              'Hand',
              'Head',
              'Lung',
              'Spine']
Modality = AskUser('Please select modality', Modalities)

## Get source parameters (kV/mA) based on modality
### According to Ivan
### Lunge: 120kV, 400mA, 160ms, 63mAs (Automatik)
### Hand: 60kV, 320mA, 6.3ms, 2mAs
if Modality == 'Abdomen':
    SourcekV = 1
    SourcemA = 2
elif Modality == 'Hand':
    SourcekV = 3
    SourcemA = 4
elif Modality == 'Foot':
    SourcekV = 5
    SourcemA = 6
elif Modality == 'Spine':
    SourcekV = 7
    SourcemA = 8
elif Modality == 'Head':
    SourcekV = 9
    SourcemA = 0
print('Please select x-ray source voltage')
### check if values are correct, i.e. from specs
kVValues = [46, 53, 60, 70, 80, 90, 100, 120]
mAValues = [100, 125, 160, 200, 250]
## Set x-ray pulse duration
SourceExposuretime = float(input(' '.join(['Please input the *x-ray pulse*',
                                           'duration [ms]:'])))
if not SourceExposuretime:
    print('Really, 0 ms? Settting exposure time to 10 ms...')
    SourceExposuretime = 10
SourcemAs = SourcemA * SourceExposuretime / 1000

print('The source is set to', SourcekV, 'kV and', SourcemA,
    'mA, to be delivered during', SourceExposuretime, 'ms.')
print('The resulting *mAs* is thus', SourcemAs, 'mAs')
print()

# Prepare output directory
SaveDirectory = os.path.join(BaseDirectory, Scintillator,
                             apbase.Camera().sensor.part_number, Lens,
                             Modality, str(ExperimentID))
try:
    os.makedirs(SaveDirectory)
except FileExistsError:
    # Skip if the folder already exists
    pass
devware.setoption_str('Capture File', SaveDirectory)

# Set CMOS exposure time
WasExposureTime = float(apbase.getstate('HW Exposure Time')) * 1000
print('Please input the desired *CMOS* exposure time.')
print('We suggest to use')
print('    * less than', int(round(SourceExposuretime / 10)),
      'ms so you get at least 10 exposured during the x-ray pulse.')
print('    * more than', int(round((1 / maxfps) * 1000)),
      'ms to get as many photons as possible with the maximum of', maxfps,
      'fps we can read out for the', apbase.Camera().sensor.part_number,
      'sensor.')
DesiredExposureTime = float(input('Desired *CMOS* exposure time [ms]:'))
if not DesiredExposureTime:
    print('Really, 0 ms? Settting exposure time to 1 ms...')
    DesiredExposureTime = 1
# Inform the user if the resulting frames per second are more than what we can
# grab from the current sensor. And set the exposure time corresponding to the
# maximally *readable* fps.
if (1 / (DesiredExposureTime / 1000)) > float(maxfps):
    print('You requested to save images at',
          round(1 / (DesiredExposureTime / 1000), 1), 'fps.')
    print('We cannot read the images faster than', maxfps, 'fps with the',
          apbase.Camera().sensor.part_number, 'sensor.')
    print('We thus increase the exposure time of the CMOS from',
          round(DesiredExposureTime, 2), 'ms to',
          round((1 / maxfps) * 1000, 2), 'ms.')
    # Set exposuretime to 'maxfps' frames per second
    DesiredExposureTime = (1 / maxfps) * 1000
# And actually set CMOS exposure time now
CMOSExposuretime = SetExposureTime(DesiredExposureTime)

# Define experiment time
Slots = [3, 5, 10]
RecordingTime = AskUser('Select desired experiment time', Slots)
if RecordingTime:
    RecordingTime = float(RecordingTime)
else:
    RecordingTime = 1
if RecordingTime < 2 * (SourceExposuretime / 1000):
    print('We want to record at least during twice the exposure time of the',
          'source, which is', SourceExposuretime, 'ms.')
    RecordingTime = 2 * (SourceExposuretime / 1000)
    print('Thus setting the recording time to', RecordingTime, 's.')
print()

# Inform the user about what we'll do
print()
FilePrefix = '_'.join([str(ExperimentID),
                       Scintillator,
                       apbase.Camera().sensor.part_number,
                       str(CMOSWidth) + 'x' + str(CMOSHeight),
                       Lens,
                       Modality,
                       str(SourcekV) + 'kV',
                       str(SourcemAs) + 'mAs',
                       str(round(SourceExposuretime, 2)) + 'msXray',
                       str(round(CMOSExposuretime, 2)) + 'msCMOS'])
print('The results of experiment ID:', ExperimentID, 'with the')
print('    *', Scintillator, 'scintillator in combination with the')
print('    *', apbase.Camera().sensor.part_number, 'sensor and', Lens,
    'lens.')
print('    * of a', Modality, 'phantom imaged with')
print('    * an x-ray pulse of', SourceExposuretime, 'ms')
print('        * ', SourcekV, 'kV')
print('        * ', SourcemA, 'mA')
print('        * ', SourcemAs, 'mAs')
print('    * recorded during', int(round(RecordingTime)),
    's with a CMOS exposure time of', round(DesiredExposureTime, 2), 'ms (' +
    str(round(1 / float(apbase.getstate('HW Exposure Time')), 1)),
    'fps)')
print('will be')
print('    * approximately',
      int(round(RecordingTime / float(apbase.getstate('HW Exposure Time')))),
      'images with names like')
print('     ', FilePrefix + '*.raw.')
print('    * in the folder', devware.getoption_str('Capture File'))
print()

# Count down
Slots = [2, 3, 5]
CountDownTime = AskUser('Start experiment after a countdown of ... seconds',
                        Slots)

# Acquire the images
threading.Thread(target=Acquisition, args=(SaveDirectory,
                                           FilePrefix,
                                           CMOSExposuretime,
                                           RecordingTime,
                                           CountDownTime)).start()


# General stuff which we always need. This preset is executed at INI file load
[Python:]
import os
import time
import platform  # To differentiate between Linux and OS X
import threading  # Threading library prevents "output locking" on OS X.
os.system('clear')


def AskUser(Blurb, Choices):
    """
    Ask for input in a working-on-both-platforms-way

    Bill from Aptina writes that "it was easy to make" the INI file command
    PROMPT= "available in Python". He created apbase.multiple_choice(). You
    give it a question string and a list of choices. It returns the choice from
    the list numbered from 1, 0 if the us made no choice or -1 if the user
    cancelled the dialog.
    """
    if 'Darwin' in platform.system():
        Selection = 0
        while Selection < 1:
            Selection = apbase.multiple_choice(Blurb, Choices)
        return Choices[Selection-1]
    elif 'Linux' in platform.system():
        print(Blurb)
        for Counter, Item in enumerate(Choices):
            print('    * [' + str(Counter) + ']:', Item)
        Selection = []
        while Selection not in range(len(Choices)):
            Selection = int(input(' '.join(['Please enter the choice you want',
                                            '[0-' + str(len(Choices) - 1) +
                                            ']:'])))
            if Selection not in range(len(Choices)):
                print('Try again')
        return Choices[Selection]


def fijioutput(Directory=devware.getoption_str('Capture File')):
    """Inform the user how to load the results in Fiji."""
    print('Open the RAW files in', Directory, 'in Fiji as')
    print('    * "16-bit Unsigned" with')
    print('    * a width of', str(CMOSWidth), 'px,')
    print('    * a height of', str(CMOSHeight), 'px and')
    print('    * with "Little-Endian byte order"')
    print(80 * '-')


def SetExposureTime(DesiredExposureTime, verbose=False):
    """
    Set the frame time of the CMOS

    If the user wants to know what was set, then he/she should add a verbose
    flag (i.e. True) as second parameter.
    """
    CurrentExposureTime = float(apbase.getstate('HW Exposure Time')) * 1000
    apbase.setstate('HW Exposure Time', str(DesiredExposureTime / 1000))
    # Grab some frames from the buffer to make sure the settings are reflected
    # in the output images
    frames = 5
    for i in range(frames):
        Return, Image = apbase.Camera().grab_frame()
        if verbose:
            print('Grabbing frame', str(i) + '/' + str(frames),
                'to clear the buffer.')
    ActualExposuretime = float(apbase.getstate('HW Exposure Time')) * 1000
    if verbose:
        print('Setting CMOS Exposure time from',
              round(CurrentExposureTime, 2), 'to',
              round(DesiredExposureTime, 2), 'ms (desired,',
              round(ActualExposuretime, 2), 'ms actual).')
        print('After some time you should see',
              round(1 / (ActualExposuretime / 1000), 1),
              'as "FPS (Sensor)"', end='')
        if 1 / (ActualExposuretime / 1000) > absmaxfps:
            print(' (up to a maximum of', absmaxfps, 'fps).')
        else:
            print()
        print('"FPS (Datalink) and "FPS (Display)" should show that value',
              'already', end='')
        if 1 / (ActualExposuretime / 1000) > maxfps:
            print(' (up to a maximum of', maxfps, 'fps).')
        else:
            print()
    return ActualExposuretime


def Countdown(Duration):
    '''
    Count down for some time

    Put into a function to prevent locking of the DevWare GUI, according to
    email from Bill Dirks@aptina on Tue, 24 Jun 2014
    '''
    Duration = float(Duration)
    StartTime = time.time()
    while time.time() <= StartTime + Duration:
        print('starting in', round(Duration - (time.time() - StartTime)),
              'seconds...')
        time.sleep(0.1)


def Acquisition(SaveDirectory=devware.getoption_str('Capture File'),
                FilePrefix='image',
                CMOSExposuretime=apbase.getstate('HW Exposure Time'),
                RecordingTime=10,
                CountDownTime=5):
    '''
    Perform the actual acquisition of the frames, including a count down

    Put into a function to prevent locking of the DevWare GUI, according to
    email from Bill Dirks@aptina on Tue, 24 Jun 2014
    '''
    # Count down first
    Countdown(CountDownTime)
    print(80 * '-')

    # Acquire the images
    ## Stop Image display
    devware.stop(True)
    ## Clear the frame buffer
    for i in range(4):
        Return, Image = apbase.Camera().grab_frame()
    ## Actually grab the images now
    Counter = 1
    NumberOfImages = int(round(RecordingTime / (CMOSExposuretime / 1000)))
    StartTime = time.time()
    while time.time() <= StartTime + float(RecordingTime):
        s = time.time()
        # Grab an image from the CMOS and save it to a nicely named file
        Return, Image = apbase.Camera().grab_frame()
        with open(os.path.join(SaveDirectory,
                               str(FilePrefix) + '_' +
                               str(Counter).zfill(len(str(NumberOfImages))) +
                               '.raw'), 'wb') as Imagefile:
            Imagefile.write(Image)
        e = time.time()
        print('Saving image',
              str(Counter).zfill(len(str(NumberOfImages))) + '/' +
              str(NumberOfImages), '| elapsed time:',
              "{:.2f}".format(round(time.time() - StartTime, 2)) + '/' +
              str(RecordingTime), 's |', str(round((1 / (e - s)), 1)),
              'fps.')
        Counter += 1
    # Start image display again
    devware.stop(False)
    print(80 * '-')

    # Inform the user about what we did
    fijioutput(SaveDirectory)

CMOSWidth = apbase.Camera().sensor.width
CMOSHeight = apbase.Camera().sensor.height

print('Setting default parameters of', apbase.Camera().sensor.part_number,
      'sensor')
if 'AR0130' in apbase.Camera().sensor.part_number:
    maxfps = 10.3
    absmaxfps = 45
if 'AR0132' in apbase.Camera().sensor.part_number:
    maxfps = 15.5
    absmaxfps = 45
if 'MT9M001' in apbase.Camera().sensor.part_number:
    maxfps = 7.5
    absmaxfps = 7.5
