# INI file for Ivans Master thesis.
# We need to set
#   * the experiment number,
#   * the modality and
#   * the output parameters of the source (kv, mAs and the like)

# For names of classes and attributes see the Aptina atalassian website under
# https://aptina.atlassian.net/wiki/display/DEVS/DevWare+Python
[Python: Print registers]
os.system('clear')
#~ for r in reg:
    #~ print(r.symbol)
    #~ for b in r:
        #~ print('    ', b.symbol)
for i in [0x3058, 0x3056, 0x305C, 0x305A, 0x305E]:
    reg.reg(i).value = 0x0020
    print('Register', i, 'set to value', 0x0020)
for i in [0x3058, 0x3056, 0x305C, 0x305A, 0x305E]:
    register = reg.reg(i).symbol
    value = reg.reg(i).value
    print(register, value)


[Python: Set exposure time]
was = float(apbase.getstate('HW Exposure Time')) * 1000
print('CMOS is currently set to expose for', round(was, 3), 'ms')
should = int(input('Desired exposure time [ms]:'))
SetExposureTime(should)

[Python: Experiment]
os.system('clear')
# Setting up some standard parameters
# "root" directory where we save everything
BaseDirectory = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number)

# Show where DevWare saves the stuff and other directories
print('DevWare is running from', apbase.home)
print('The current INI file is loaded from', os.path.dirname(__IniFileName))
print('Images will be saved to', devware.getoption_str('Capture File'))
print()

# Use current POSIX time as experiment ID
ExperimentID = round(time.time()) - 1403000000

# Get experiment parameters
## Select modality
print('Please select modality')
Modalities = ['Abdomen', 'Hand', 'Foot', 'Spine', 'Head']
for counter, Modality in enumerate(Modalities):
    print('   * [' + str(counter) + ']:', Modality)
selection = []
while selection not in range(len(Modalities)):
    selection = int(input(' '.join(['Please enter the modality you want [0-' +
                                    str(len(Modalities) - 1) + ']:'])))
    if selection not in range(len(Modalities)):
        print('Try again')
Modality = Modalities[selection]
SaveDirectory = os.path.join(BaseDirectory, Modality, str(ExperimentID))
try:
    os.makedirs(SaveDirectory)
except FileExistsError:
    # Don't do anything if the folder already exists
    pass
devware.setoption_str('Capture File', SaveDirectory)
print()

# Get source parameters
print('Please select x-ray source voltage')
## kV
kVValues = [46, 53, 60, 70, 80, 90, 100, 120]
for counter, kV in enumerate(kVValues):
    print('   * [' + str(counter) + ']:', kV, 'kV')
selection = []
while selection not in range(len(kVValues)):
    selection = int(input(' '.join(['Please enter the kV you set [0-' +
                                    str(len(kVValues) - 1) + ']:'])))
    if selection not in range(len(kVValues)):
        print('Try again')
SourcekV = kVValues[selection]
print('The source is set to', SourcekV, 'kV')
print()
## mA/mAs
print('Please select x-ray source current')
mAValues = [100, 125, 160, 200, 250]
for counter, mA in enumerate(mAValues):
    print('   * [' + str(counter) + ']:', mA, 'mA')
selection = []
while selection not in range(len(mAValues)):
    selection = int(input(' '.join(['Please enter the mA you set [0-' +
                                    str(len(mAValues) - 1) + ']:'])))
    if selection not in range(len(mAValues)):
        print('Try again')
SourcemA = mAValues[selection]
print('The source is set to', SourcemA, 'mA')
print()
SourceExposuretime = float(input(' '.join(['Please input the *x-ray source*',
                                           'exposure time [ms]:'])))
if not SourceExposuretime:
    print('Really, 0 ms? Settting exposure time to 1 ms...')
    SourceExposuretime = 1
SourcemAs = SourcemA * SourceExposuretime / 1000
print('The resulting *mAs* is thus', SourcemAs, 'mAs')
print()

# Get CMOS parameters
WasExposureTime = float(apbase.getstate('HW Exposure Time')) * 1000
print('Please input the desired *CMOS* exposure time.')
print('We suggest to use')
print('   * less than', SourceExposuretime / 10,
    'ms so you get at least 10 exposured during the x-ray pulse.')
print('   * more than than', round((1 / maxfps) * 1000, 3),
    'ms to get as many photons as possible during the maximum of', maxfps,
    'fps we can read out for the', apbase.Camera().sensor.part_number,
    'sensor.')

DesiredExposureTime = float(input('Desired *CMOS* exposure time [ms]:'))
if not DesiredExposureTime:
    print('Really, 0 ms? Settting exposure time to 1 ms...')
    DesiredExposureTime = 1

# Define expperiment time
RecordingTime = int(input('How long would you like to record images? [s]:'))
if RecordingTime < 2 * (SourceExposuretime / 1000):
    print('We want to record at least during twice the exposure time of the',
        'source, which is', SourceExposuretime, 'ms.')
    RecordingTime = 2 * (SourceExposuretime / 1000)
    print('Thus setting the recording time to', RecordingTime, 's.')
print()

# Calculate fps and some other bits to give some info and set the filenames
fps = 1 / (DesiredExposureTime / 1000)
print(80 * '-')
print('You want to grab images with', DesiredExposureTime,
       'ms exposure time (' + str(round(fps, 1)), 'fps) during', RecordingTime,
       's.')

# Inform the user if the resulting frames per second are more than what we can
# reach with the current setup
if fps > float(maxfps):
    print('Since we cannot save faster than', maxfps, 'fps with the',
        apbase.Camera().sensor.part_number, 'sensor, we increase the exposure',
        'of the CMOS from', DesiredExposureTime, 'ms to',
        round((1 / maxfps) * 1000, 3), 'ms.')
    # Set exposuretime to 'maxfps' frames per second
    DesiredExposureTime = (1 / maxfps) * 1000
# And actually set CMOS exposure time now
CMOSExposuretime = SetExposureTime(DesiredExposureTime)
NumberOfImages = int(round(RecordingTime / (CMOSExposuretime / 1000)))

# Inform the user about what goes where.
print()
FilePrefix = '_'.join([Modality, str(ExperimentID),
                       str(CMOSWidth) + 'x' + str(CMOSHeight),
                       str(SourcekV) + 'kV',
                       str(SourcemAs) + 'mAs',
                       str(SourceExposuretime) + 'msSource',
                       str(round(CMOSExposuretime * 1000, 3)) + 'msCMOS'])
print('The results of experiment ID:', ExperimentID)
print('   * of a', Modality, 'phantom imaged with')
print('   * an x-ray pulse of', SourcekV, 'kV and', SourcemAs, 'mAs will be')
print('   *', NumberOfImages, 'images with names like', FilePrefix + '*.raw.')
print('   * in the folder', devware.getoption_str('Capture File'))
print()

# Prepare the user for the experiment
waittime = 5
print('As soon as you press "Enter", a', waittime, 's long count-down will',
    'start.')
print('Once the count-down is done image acquisition starts.')
print('Once I am saving images, you should also press the x-ray source',
    'button')
input()

# Acquire the images
# Clear the frame buffer
for i in range(4):
    Return, Image = apbase.Camera().grab_frame()
# Prepare the user
CountDownTime = 5
print ()
StartTime = time.time()
# clear the commandline with ANSI escape sequence
# http://stackoverflow.com/a/11986396
while time.time() <= StartTime + CountDownTime:
    print('\x1b[1A', 35 * ' ', 'Countdown:',
        int(round(waittime -  (time.time() - StartTime))))
    time.sleep(0.1)
print()
print('Lift off!')
print(80 * '-')
print()
# Image saving loop
Counter = 1
StartTime = time.time()
while time.time() <= StartTime + RecordingTime:
    s = time.time()
    # Grab an image from the CMOS and save it to a nicely named file
    Return, Image = apbase.Camera().grab_frame()
    with open(os.path.join(SaveDirectory,
                            str(FilePrefix) + '_' + \
                            str(Counter).zfill(len(str(NumberOfImages))) + \
                            '.raw'), 'wb') as Imagefile:
        Imagefile.write(Image)
    e = time.time()
    print('\x1b[1ASaving image',
        str(Counter).zfill(len(str(NumberOfImages))) + '/' + \
        str(NumberOfImages), '| elapsed time:',
        str(round(time.time() -
            StartTime, 2)).zfill(3 + len(str(RecordingTime))) + '/' + \
        str(RecordingTime), 's |', str(round((1 / (e - s)), 1)).zfill(4),
        'fps.')
    Counter += 1
print(80 * '-')

print('CMOS exposure time set back to',
    round(SetExposureTime(WasExposureTime),3),
    'ms (what it was before the experiment).')

print('Saved', Counter, 'images to', SaveDirectory)
fijioutput()

# General stuff which we always need. This preset is executed at INI file load
[Python:]
import os
os.system('clear')
import time

CMOSWidth = apbase.Camera().sensor.width
CMOSHeight = apbase.Camera().sensor.height

# Probably it would be a good idea to reset all the different sensors to their
# initial state at the beginning of the INI file.
# Grabbing presets from their respective orignal INI files (see comment) and
# translating them to python with the help of http://is.gd/EtEwf8
## AR0130: ?
if 'AR0130' in apbase.Camera().sensor.part_number:
    print('Setting AR0130 to default values')
    maxfps = 10.3
## AR0132: Linear Mode RAW (copied from AR0132-REV6.ini)
if 'AR0132' in apbase.Camera().sensor.part_number:
    print('Setting AR0132 to default values')
    maxfps = 200
    # [Demo Initialization]
    ## begin: Load = Reset
    ### [Reset]
    apbase.setstate('Sensor Reset', 1)  # STATE= Sensor Reset, 1
    apbase.delay(200)                   # DELAY= 200
    apbase.setstate('Sensor Reset', 0)  # STATE= Sensor Reset, 0
    reg.RESET_REGISTER = 1              # FIELD_WR= RESET_REGISTER, 1
    reg.RESET_REGISTER = 0x10D8         # FIELD_WR= RESET_REGISTER, 0x10D8
    ## end: Load = Reset
    apbase.delay(200)                   # DELAY= 200
    ## begin: Load = A-1000 Hidy and linear sequencer no hold time August 3 2012
    ### [A-1000 Hidy and linear sequencer no hold time August 3 2012]
    reg.reg(0x3088) = 0x8000    # REG= 0x3088, 0x8000     // SEQ_CTRL_PORT
    # ~280 lines of setting one register (see original file, line 522) replaced
    # by setting the register to a list (as per documentation:
    # reg.reg(0x990).value = [0x3C3C, 0x3C3C, ....
    reg.reg(0x3086).value = [0x0025, 0x5050, 0x2d26, 0x0828, 0x0d17, 0x0926,
        0x0028, 0x0526, 0xa728, 0x0725, 0x8080, 0x2925, 0x0040, 0x2700, 0x1616,
        0x2700, 0x1f17, 0x3626, 0xa617, 0x0326, 0xa417, 0x1f28, 0x0526, 0x2028,
        0x0425, 0x2020, 0x2700, 0x171d, 0x2500, 0x2017, 0x1219, 0x1703, 0x2700,
        0x1728, 0x2805, 0x1710, 0x2706, 0x1708, 0x2660, 0x175a, 0x2317, 0x1122,
        0x1741, 0x2500, 0x9027, 0x0026, 0x1828, 0x002e, 0x2a28, 0x081c, 0x1470,
        0x7003, 0x1470, 0x7004, 0x1470, 0x7005, 0x1470, 0x7009, 0x170c, 0x0014,
        0x0020, 0x0014, 0x0050, 0x0314, 0x0020, 0x0314, 0x0050, 0x0414, 0x0020,
        0x0414, 0x0050, 0x0514, 0x0020, 0x2405, 0x1400, 0x5001, 0x2550, 0x502d,
        0x2608, 0x280d, 0x1709, 0x2600, 0x2805, 0x26a7, 0x2807, 0x2580, 0x8029,
        0x2500, 0x4027, 0x0016, 0x1627, 0x0020, 0x1736, 0x26a6, 0x1703, 0x26a4,
        0x171f, 0x2805, 0x2620, 0x2804, 0x2520, 0x2027, 0x0017, 0x1d25, 0x0020,
        0x1712, 0x1a17, 0x0327, 0x0017, 0x2828, 0x0517, 0x1027, 0x0617, 0x0826,
        0x6017, 0x9827, 0x0017, 0x1525, 0x0090, 0x2700, 0x2618, 0x2800, 0x2e2a,
        0x2808, 0x1d05, 0x1470, 0x7009, 0x1720, 0x1400, 0x2024, 0x1400, 0x5002,
        0x2550, 0x502d, 0x2608, 0x280d, 0x1709, 0x2600, 0x2805, 0x26a7, 0x2807,
        0x2580, 0x8029, 0x2500, 0x4027, 0x0016, 0x1627, 0x0017, 0x3626, 0xa617,
        0x0326, 0xa417, 0x1f28, 0x0526, 0x2028, 0x0425, 0x2020, 0x2700, 0x171d,
        0x2500, 0x2021, 0x1712, 0x1b17, 0x0327, 0x0017, 0x2828, 0x0517, 0x1027,
        0x0617, 0x0826, 0x6017, 0x9827, 0x0017, 0x1525, 0x0090, 0x2700, 0x2618,
        0x2800, 0x2e2a, 0x2808, 0x1e17, 0x0a05, 0x1470, 0x7009, 0x1616, 0x1616,
        0x1616, 0x1616, 0x1616, 0x1616, 0x1616, 0x1616, 0x1616, 0x1616, 0x1616,
        0x1616, 0x1616, 0x1614, 0x0020, 0x2414, 0x0050, 0x2b2b, 0x2c2c, 0x2c2c,
        0x2c00, 0x0225, 0x5050, 0x2d26, 0x0828, 0x0d17, 0x0926, 0x0028, 0x0526,
        0xa728, 0x0725, 0x8080, 0x2917, 0x0525, 0x0040, 0x2700, 0x1616, 0x2700,
        0x1736, 0x26a6, 0x1703, 0x26a4, 0x171f, 0x2805, 0x2620, 0x2804, 0x2520,
        0x2027, 0x0017, 0x1e25, 0x0020, 0x2117, 0x121b, 0x1703, 0x2700, 0x1728,
        0x2805, 0x1710, 0x2706, 0x1708, 0x2660, 0x1798, 0x2700, 0x1715, 0x2500,
        0x9027, 0x0026, 0x1828, 0x002e, 0x2a28, 0x081e, 0x0831, 0x1440, 0x4014,
        0x2020, 0x1410, 0x1034, 0x1400, 0x1014, 0x0020, 0x1400, 0x4013, 0x1802,
        0x1470, 0x7004, 0x1470, 0x7003, 0x1470, 0x7017, 0x2002, 0x1400, 0x2002,
        0x1400, 0x5004, 0x1400, 0x2004, 0x1400, 0x5022, 0x0314, 0x0020, 0x0314,
        0x0050, 0x2c2c, 0x2c2c]
    reg.reg(0x309E).value = 0x019A  # REG=0x309E, 0x019A //set start address for linear seq
    ## end: Load = A-1000 Hidy and linear sequencer no hold time August 3 2012
    ## begin: Load = A-1000ERS Optimized setting  no hold time May 5 2012
    ### [A-1000ERS Optimized setting  no hold time May 5 2012]
    reg.reg(0x301E).value = 0x00C8  # REG= 0x301E, 0x00C8
    reg.reg(0x3EDA).value = 0x0F03  # REG= 0x3EDA, 0x0F03
    reg.reg(0x3EDE).value = 0xC005  # REG= 0x3EDE, 0xC005
    reg.reg(0x3ED8).value = 0x09DF  # REG= 0x3ED8, 0x09DF
    reg.reg(0x3EE2).value = 0xA46B  # REG= 0x3EE2, 0xA46B
    reg.reg(0x3EE0).value = 0x067D  # REG= 0x3EE0, 0x067D
    reg.reg(0x3EDC).value = 0x0070  # REG= 0x3EDC, 0x0070
    reg.reg(0x3044).value = 0x0404  # REG= 0x3044, 0x0404
    reg.reg(0x3EE6).value = 0x8303  # REG= 0x3EE6, 0x8303
    reg.reg(0x3EE4).value = 0xD208  # REG= 0x3EE4, 0xD208
    reg.reg(0x3ED6).value = 0x00BB  # REG= 0x3ED6, 0x00BB
    reg.reg(0x30E4).value = 0x6372  # REG= 0x30E4, 0x6372
    reg.reg(0x30E2).value = 0x7253  # REG= 0x30E2, 0x7253
    reg.reg(0x30E0).value = 0x5470  # REG= 0x30E0, 0x5470
    reg.reg(0x30E6).value = 0xC4CC  # REG= 0x30E6, 0xC4CC
    reg.reg(0x30E8).value = 0x8050  # REG= 0x30E8, 0x8050
    ## end: Load = A-1000ERS Optimized setting  no hold time May 5 2012
    apbase.delay(200)                   # DELAY= 200
    ## begin: Load = Linear Parallel Full Resolution
    ### [Linear Parallel Full Resolution ]
    ## begin: LOAD= Linear Mode Setup
    ## end: LOAD= Linear Mode Setup
    ## begin: LOAD= Full Resolution 30fps Setup
    ## end: LOAD= Full Resolution 30fps Setup
    ## begin: LOAD= Enable Parallel Mode
    ## end: LOAD= Enable Parallel Mode
    apbase.setstate('Defect Enable', 1)         # STATE= Defect Enable, 1
    apbase.setstate('Detect Master Clock', 1)   # STATE= Detect Master Clock, 1
    apbase.setstate('True Black Enable', 1)     # STATE=True Black Enable, 1
    apbase.setstate('True Black Level', 200)     # STATE= True Black Level, 200
    ## begin: LOAD = Enable AE and Load Optimized Settings For Linear Mode
    ## end: LOAD = Enable AE and Load Optimized Settings For Linear Mode
    reg.RESET_REGISTER.STREAM = 0x0001  # FIELD_WR=RESET_REGISTER, STREAM, 0x0001
    ## end: Load = Linear Parallel Full Resolution
    # [Linear Mode RAW]
    reg.RESET_REGISTER.STREAM = 0x0000  # FIELD_WR=RESET_REGISTER, STREAM, 0x0000
    reg.OPERATION_MODE_CTRL = 0x29      # FIELD_WR=OPERATION_MODE_CTRL, 0x29
    reg.RESET_REGISTER.STREAM = 0x0001  # FIELD_WR=RESET_REGISTER, STREAM, 0x0001
    ## begin: Load = Sensor Evaluation (all auto functions turned off leaves mode the same)
    # begin: Load = Disable_AutoExposure
    reg.RESET_REGISTER.STREAM = 0x0000  # FIELD_WR=RESET_REGISTER, STREAM, 0x0000
    reg.reg(0x3100).value = 0x001A      # REG=0x3100, 0x001A
    reg.RESET_REGISTER.STREAM = 0x0001  # FIELD_WR=RESET_REGISTER, STREAM, 0x0001
    # end: Load = Disable_AutoExposure
    apbase.image(0,0,'BAYER-12')        # IMAGE = 0,0,BAYER-12
    # begin: Load = Color Processing OFF
    apbase.setstate('Auto Exposure', 0)     # STATE=Auto Exposure, 0
    apbase.setstate('True Black Enable', 0) # STATE=True Black Enable, 0
    apbase.setstate('Aperture Enable', 0)   # STATE=Aperture Enable, 0
    apbase.setstate('Color Correction', 0)  # STATE=Color Correction, 0
    apbase.setstate('White Balance', 0)     # STATE=White Balance, 0
    # end: Load = Color Processing OFF
    apbase.setstate('Filter', 3)        # STATE=Filter, 3
    apbase.setstate('Defect Enable', 0) # STATE= Defect Enable, 0
    # FIELD_WR= BLUE_GAIN, 0x0020   // REG= 0x3058, 0x0020
    # FIELD_WR= GREEN1_GAIN, 0x0020 // REG= 0x3056, 0x0020
    # FIELD_WR= GREEN2_GAIN, 0x0020 // REG= 0x305C, 0x0020
    # FIELD_WR= RED_GAIN, 0x0020    // REG= 0x305A, 0x0020
    # FIELD_WR= GLOBAL_GAIN, 0x0020 // REG= 0x305E, 0x0020
    for i in [0x3058, 0x3056, 0x305C, 0x305A, 0x305E]:
        reg.reg(i).value = 0x0020
    ## end: Load = Sensor Evaluation (all auto functions turned off leaves mode the same)
## MT9M001: ?
if 'MT9M001' in apbase.Camera().sensor.part_number:
    print('Setting MT9M001 to default values')
    maxfps = 7.8
print()
print(15 * ' ', 'Semi-randomly set maximum fps to', maxfps)
print(15 * ' ', 'This *needs* empirical tests with the sensors!')
print()


def fijioutput():
    print(80 * '-')
    print('Open the RAW files in Fiji as')
    print('   * "16-bit Unsigned" with')
    print('   * a width of', str(CMOSWidth), 'px,')
    print('   * a height of', str(CMOSHeight), 'px and')
    print('   * with "Little-Endian byte order"')
    print(80 * '-')


def SetExposureTime(DesiredExposureTime):
    CurrentExposureTime = round(float(apbase.getstate('HW Exposure Time')) *
                                      1000, 3)
    apbase.setstate('HW Exposure Time', str(DesiredExposureTime / 1000))
    # Grab some frames from the buffer to make sure the settings stuck
    frames = 4
    for i in range(frames):
        Return, Image = apbase.Camera().grab_frame()
        #~ print('Grabbing frame', str(i) + '/' + str(frames),
            #~ 'to make the settings stick.')
    ActualExposuretime = float(apbase.getstate('HW Exposure Time')) * 1000
    print('Setting CMOS Exposure time from', CurrentExposureTime, 'to',
        round(DesiredExposureTime, 3), 'ms (desired,',
        round(ActualExposuretime, 3), 'ms actual).')
    return ActualExposuretime
