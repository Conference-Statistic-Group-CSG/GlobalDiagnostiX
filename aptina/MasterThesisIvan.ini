# INI file for Ivans Master thesis.
# We need to set
#   * the experiment number,
#   * the modality and
#   * the output parameters of the source (kv, mAs and the like)

# For names of classes and attributes see the Aptina atalassian website under
# https://aptina.atlassian.net/wiki/display/DEVS/DevWare+Python

# General stuff which we always need. This preset is executed at INI file load
[Python:]
import os
os.system('clear')
import time

CMOSWidth = apbase.Camera().sensor.width
CMOSHeight = apbase.Camera().sensor.height


def fijioutput():
    print(80 * '-')
    print('Open the RAW files in Fiji as')
    print('   * "16-bit Unsigned" with')
    print('   * a width of', str(CMOSWidth), 'px,')
    print('   * a height of', str(CMOSHeight), 'px and')
    print('   * with "Little-Endian byte order"')
    print(80 * '-')


[Python: Experiment]
os.system('clear')
# Setting up some standard parameters
# "root" directory where we save everything
BaseDirectory = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number)

# Show where DevWare saves the stuff and other directories
print('DevWare is running from', apbase.home)
print('The current INI file is loaded from', os.path.dirname(__IniFileName))
print('Images will be saved to', devware.getoption_str('Capture File'))
print()

# Use current POSIX time as experiment ID
ExperimentID = round(time.time()) - 1402000000

# Get experiment parameters
## Select modality
print('Please select modality')
Modalities = ['Abdomen', 'Hand', 'Foot', 'Spine', 'Head']
for counter, Modality in enumerate(Modalities):
    print('   * [' + str(counter) + ']:', Modality)
selection = []
while selection not in range(len(Modalities)):
    selection = int(input(' '.join(['Please enter the modality you want [0-' +
                                    str(len(Modalities) - 1) + ']:'])))
    if selection not in range(len(Modalities)):
        print('Try again')
Modality = Modalities[selection]
SaveDirectory = os.path.join(BaseDirectory, Modality, str(ExperimentID))
try:
    os.makedirs(SaveDirectory)
except FileExistsError:
    # Don't do anything if the folder already exists
    pass
devware.setoption_str('Capture File', SaveDirectory)
print()

# Get source parameters
print('Please select x-ray source voltage')
## kV
kVValues = [46, 53, 60, 70, 80, 90, 100, 120]
for counter, kV in enumerate(kVValues):
    print('   * [' + str(counter) + ']:', kV, 'kV')
selection = []
while selection not in range(len(kVValues)):
    selection = int(input(' '.join(['Please enter the kV you set [0-' +
                                    str(len(kVValues) - 1) + ']:'])))
    if selection not in range(len(kVValues)):
        print('Try again')
SourcekV = kVValues[selection]
print('The source is set to', SourcekV, 'kV')
print()
## mA/mAs
print('Please select x-ray source current')
mAValues = [100, 125, 160, 200, 250]
for counter, mA in enumerate(mAValues):
    print('   * [' + str(counter) + ']:', mA, 'mA')
selection = []
while selection not in range(len(mAValues)):
    selection = int(input(' '.join(['Please enter the mA you set [0-' +
                                    str(len(mAValues) - 1) + ']:'])))
    if selection not in range(len(mAValues)):
        print('Try again')
SourcemA = mAValues[selection]
print('The source is set to', SourcemA, 'mA')
print()
SourceExposuretime = float(input(' '.join(['Please input x-ray source',
                                           ' exposure time [ms]:'])))
SourcemAs = SourcemA * SourceExposuretime / 1000
print('The resulting *mAs* is thus', SourcemAs, 'mAs')
print()

# Get CMOS parameters
WasExposureTime = float(apbase.getstate('HW Exposure Time'))
print('Current *CMOS* exposure time is', round(WasExposureTime * 1000, 3),
       'ms')
manual = 1
SuggestedCMOSExposureTime = SourceExposuretime / 10
if manual:
    DesiredExposureTime = float(input(' '.join(['Desired *CMOS* exposure',
                                                'time. We suggest to use',
                                                str(SuggestedCMOSExposureTime),
                                                'ms, which is 10 exposures',
                                                'during the x-ray pulse [ms]:'
                                                ]))) / 1000
else:
    ReadOutFrequency = 15
    print('Setting Exposure time to Maximum of what we can get at',
           ReadOutFrequency, 'Hz')
    DesiredExposureTime = (1 / ReadOutFrequency)
print('Setting Exposure time to', DesiredExposureTime, 's')
apbase.setstate('HW Exposure Time', str(DesiredExposureTime))
# Grab some frames from the buffer to make sure the exposure time is correct
for i in range(5):
    Return, Image = apbase.Camera().grab_frame()
CMOSExposuretime = float(apbase.getstate('HW Exposure Time'))
print('Exposure time has been set to', round(CMOSExposuretime * 1000, 3),
       'ms')

# Inform the user about what goes where.
print(80 * '-')
FilePrefix = '_'.join([Modality, str(ExperimentID),
                       str(CMOSWidth) + 'x' + str(CMOSHeight),
                       str(SourcekV) + 'kV',
                       str(SourcemAs) + 'mAs',
                       str(SourceExposuretime) + 'msSource',
                       str(round(CMOSExposuretime * 1000, 3)) + 'msCMOS'])
print('Images of experiment ID', str(ExperimentID),
       'will be saved to the directory',
       str(devware.getoption_str('Capture File')))
print('as', FilePrefix + '*.raw.')
print()

# Give the user some time to set up and inform about
RecordingTime = int(input('How long would you like to record images? [s]:'))

# Ask for how long we should record? Gives NumberOfImages, fps, etc.
NumberOfImages = int(round(RecordingTime / CMOSExposuretime))
print('You want to grab images with', round(CMOSExposuretime * 1000, 3),
       'ms exposure time corresponding to approximately',
       int(round(1 / (CMOSExposuretime))), 'fps.')
print('During', RecordingTime, 's, this should give you a total of',
    NumberOfImages, 'images (if we could save at "infinite" speed).')

print('TELL SOMETHING ABOUT THE FPS...')
#~ if 1 / (DesiredExposureTime / 1000) > 8:
    #~ print('I reduce the amount of recorded images to match the maximally',
        #~ 'achievable 7.5 fpsso that you do not have to wait for',
        #~ round(NumberOfImages / 7.5, 3), 's (instead of the requested',
        #~ RecordingTime, 's).')
    #~ NumberOfImages = int(round(RecordingTime * 8))  # fps
    #~ print('You could go as high as 134 ms with the exposure time to match',
        #~ 'exposure and readout time.')
    #~ time.sleep(1)

# Prepare the user for the experiment
print()
print('As soon as you press "Enter" I will start the image acquisition')
print('Once I am saving images, you should also press the x-ray source',
    'button')
print()
input()

# Acquire the images
StartTime = time.time()
print(80 * '-','\n')
Counter = 0
# clear the commandline with ANSI escape sequence
# http://stackoverflow.com/a/11986396
while time.time() < StartTime + RecordingTime:
    Counter += 1
    print('\x1b[1ASaving image',
        str(Counter).zfill(len(str(NumberOfImages))) + \
        '/' + str(NumberOfImages), '| elapsed time:',
        str(round(time.time() - StartTime, 2)).zfill(2) + '/' + \
        str(RecordingTime), 's')
    # Grab an image from the CMOS and save it to a nicely named file
    Return, Image = apbase.Camera().grab_frame()
    with open(os.path.join(SaveDirectory,
                            str(FilePrefix) + '_' + \
                            str(Counter).zfill(len(str(NumberOfImages))) + \
                            '.raw'), 'wb') as Imagefile:
        Imagefile.write(Image)
print()
print(80 * '-')

print('Saved', Counter, 'images to', SaveDirectory)
fijioutput()
