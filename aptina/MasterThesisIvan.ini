# INI file for Ivans Master thesis.
# We need to set
#   * the experiment number,
#   * the modality and
#   * the output parameters of the source (kv, mAs and the like)

# For names of classes and attributes see the Aptina atalassian website under
# https://aptina.atlassian.net/wiki/display/DEVS/DevWare+Python

# Probably it would be a good idea to reset all the different sensors to their
# initial state at the beginning of the INI file.
# Since I was not able to do this in pure Python under the [Python:] preset at
# the end of the file, I am just copying the relevant lines from their
# respective INI files.

[AR0132: Start]
## AR0132: Linear Mode RAW (copied from AR0132-REV6.ini)
STATE = Sensor Reset, 1
DELAY = 200
STATE = Sensor Reset, 0
FIELD_WR = RESET_REGISTER, 1
FIELD_WR = RESET_REGISTER, 0x10D8
DELAY = 200
REG = 0x3088, 0x8000
REG = 0x3086, 0x0025
REG = 0x3086, 0x5050
REG = 0x3086, 0x2d26
REG = 0x3086, 0x0828
REG = 0x3086, 0x0d17
REG = 0x3086, 0x0926
REG = 0x3086, 0x0028
REG = 0x3086, 0x0526
REG = 0x3086, 0xa728
REG = 0x3086, 0x0725
REG = 0x3086, 0x8080
REG = 0x3086, 0x2925
REG = 0x3086, 0x0040
REG = 0x3086, 0x2700
REG = 0x3086, 0x1616
REG = 0x3086, 0x2700
REG = 0x3086, 0x1f17
REG = 0x3086, 0x3626
REG = 0x3086, 0xa617
REG = 0x3086, 0x0326
REG = 0x3086, 0xa417
REG = 0x3086, 0x1f28
REG = 0x3086, 0x0526
REG = 0x3086, 0x2028
REG = 0x3086, 0x0425
REG = 0x3086, 0x2020
REG = 0x3086, 0x2700
REG = 0x3086, 0x171d
REG = 0x3086, 0x2500
REG = 0x3086, 0x2017
REG = 0x3086, 0x1219
REG = 0x3086, 0x1703
REG = 0x3086, 0x2700
REG = 0x3086, 0x1728
REG = 0x3086, 0x2805
REG = 0x3086, 0x1710
REG = 0x3086, 0x2706
REG = 0x3086, 0x1708
REG = 0x3086, 0x2660
REG = 0x3086, 0x175a
REG = 0x3086, 0x2317
REG = 0x3086, 0x1122
REG = 0x3086, 0x1741
REG = 0x3086, 0x2500
REG = 0x3086, 0x9027
REG = 0x3086, 0x0026
REG = 0x3086, 0x1828
REG = 0x3086, 0x002e
REG = 0x3086, 0x2a28
REG = 0x3086, 0x081c
REG = 0x3086, 0x1470
REG = 0x3086, 0x7003
REG = 0x3086, 0x1470
REG = 0x3086, 0x7004
REG = 0x3086, 0x1470
REG = 0x3086, 0x7005
REG = 0x3086, 0x1470
REG = 0x3086, 0x7009
REG = 0x3086, 0x170c
REG = 0x3086, 0x0014
REG = 0x3086, 0x0020
REG = 0x3086, 0x0014
REG = 0x3086, 0x0050
REG = 0x3086, 0x0314
REG = 0x3086, 0x0020
REG = 0x3086, 0x0314
REG = 0x3086, 0x0050
REG = 0x3086, 0x0414
REG = 0x3086, 0x0020
REG = 0x3086, 0x0414
REG = 0x3086, 0x0050
REG = 0x3086, 0x0514
REG = 0x3086, 0x0020
REG = 0x3086, 0x2405
REG = 0x3086, 0x1400
REG = 0x3086, 0x5001
REG = 0x3086, 0x2550
REG = 0x3086, 0x502d
REG = 0x3086, 0x2608
REG = 0x3086, 0x280d
REG = 0x3086, 0x1709
REG = 0x3086, 0x2600
REG = 0x3086, 0x2805
REG = 0x3086, 0x26a7
REG = 0x3086, 0x2807
REG = 0x3086, 0x2580
REG = 0x3086, 0x8029
REG = 0x3086, 0x2500
REG = 0x3086, 0x4027
REG = 0x3086, 0x0016
REG = 0x3086, 0x1627
REG = 0x3086, 0x0020
REG = 0x3086, 0x1736
REG = 0x3086, 0x26a6
REG = 0x3086, 0x1703
REG = 0x3086, 0x26a4
REG = 0x3086, 0x171f
REG = 0x3086, 0x2805
REG = 0x3086, 0x2620
REG = 0x3086, 0x2804
REG = 0x3086, 0x2520
REG = 0x3086, 0x2027
REG = 0x3086, 0x0017
REG = 0x3086, 0x1d25
REG = 0x3086, 0x0020
REG = 0x3086, 0x1712
REG = 0x3086, 0x1a17
REG = 0x3086, 0x0327
REG = 0x3086, 0x0017
REG = 0x3086, 0x2828
REG = 0x3086, 0x0517
REG = 0x3086, 0x1027
REG = 0x3086, 0x0617
REG = 0x3086, 0x0826
REG = 0x3086, 0x6017
REG = 0x3086, 0x9827
REG = 0x3086, 0x0017
REG = 0x3086, 0x1525
REG = 0x3086, 0x0090
REG = 0x3086, 0x2700
REG = 0x3086, 0x2618
REG = 0x3086, 0x2800
REG = 0x3086, 0x2e2a
REG = 0x3086, 0x2808
REG = 0x3086, 0x1d05
REG = 0x3086, 0x1470
REG = 0x3086, 0x7009
REG = 0x3086, 0x1720
REG = 0x3086, 0x1400
REG = 0x3086, 0x2024
REG = 0x3086, 0x1400
REG = 0x3086, 0x5002
REG = 0x3086, 0x2550
REG = 0x3086, 0x502d
REG = 0x3086, 0x2608
REG = 0x3086, 0x280d
REG = 0x3086, 0x1709
REG = 0x3086, 0x2600
REG = 0x3086, 0x2805
REG = 0x3086, 0x26a7
REG = 0x3086, 0x2807
REG = 0x3086, 0x2580
REG = 0x3086, 0x8029
REG = 0x3086, 0x2500
REG = 0x3086, 0x4027
REG = 0x3086, 0x0016
REG = 0x3086, 0x1627
REG = 0x3086, 0x0017
REG = 0x3086, 0x3626
REG = 0x3086, 0xa617
REG = 0x3086, 0x0326
REG = 0x3086, 0xa417
REG = 0x3086, 0x1f28
REG = 0x3086, 0x0526
REG = 0x3086, 0x2028
REG = 0x3086, 0x0425
REG = 0x3086, 0x2020
REG = 0x3086, 0x2700
REG = 0x3086, 0x171d
REG = 0x3086, 0x2500
REG = 0x3086, 0x2021
REG = 0x3086, 0x1712
REG = 0x3086, 0x1b17
REG = 0x3086, 0x0327
REG = 0x3086, 0x0017
REG = 0x3086, 0x2828
REG = 0x3086, 0x0517
REG = 0x3086, 0x1027
REG = 0x3086, 0x0617
REG = 0x3086, 0x0826
REG = 0x3086, 0x6017
REG = 0x3086, 0x9827
REG = 0x3086, 0x0017
REG = 0x3086, 0x1525
REG = 0x3086, 0x0090
REG = 0x3086, 0x2700
REG = 0x3086, 0x2618
REG = 0x3086, 0x2800
REG = 0x3086, 0x2e2a
REG = 0x3086, 0x2808
REG = 0x3086, 0x1e17
REG = 0x3086, 0x0a05
REG = 0x3086, 0x1470
REG = 0x3086, 0x7009
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1616
REG = 0x3086, 0x1614
REG = 0x3086, 0x0020
REG = 0x3086, 0x2414
REG = 0x3086, 0x0050
REG = 0x3086, 0x2b2b
REG = 0x3086, 0x2c2c
REG = 0x3086, 0x2c2c
REG = 0x3086, 0x2c00
REG = 0x3086, 0x0225
REG = 0x3086, 0x5050
REG = 0x3086, 0x2d26
REG = 0x3086, 0x0828
REG = 0x3086, 0x0d17
REG = 0x3086, 0x0926
REG = 0x3086, 0x0028
REG = 0x3086, 0x0526
REG = 0x3086, 0xa728
REG = 0x3086, 0x0725
REG = 0x3086, 0x8080
REG = 0x3086, 0x2917
REG = 0x3086, 0x0525
REG = 0x3086, 0x0040
REG = 0x3086, 0x2700
REG = 0x3086, 0x1616
REG = 0x3086, 0x2700
REG = 0x3086, 0x1736
REG = 0x3086, 0x26a6
REG = 0x3086, 0x1703
REG = 0x3086, 0x26a4
REG = 0x3086, 0x171f
REG = 0x3086, 0x2805
REG = 0x3086, 0x2620
REG = 0x3086, 0x2804
REG = 0x3086, 0x2520
REG = 0x3086, 0x2027
REG = 0x3086, 0x0017
REG = 0x3086, 0x1e25
REG = 0x3086, 0x0020
REG = 0x3086, 0x2117
REG = 0x3086, 0x121b
REG = 0x3086, 0x1703
REG = 0x3086, 0x2700
REG = 0x3086, 0x1728
REG = 0x3086, 0x2805
REG = 0x3086, 0x1710
REG = 0x3086, 0x2706
REG = 0x3086, 0x1708
REG = 0x3086, 0x2660
REG = 0x3086, 0x1798
REG = 0x3086, 0x2700
REG = 0x3086, 0x1715
REG = 0x3086, 0x2500
REG = 0x3086, 0x9027
REG = 0x3086, 0x0026
REG = 0x3086, 0x1828
REG = 0x3086, 0x002e
REG = 0x3086, 0x2a28
REG = 0x3086, 0x081e
REG = 0x3086, 0x0831
REG = 0x3086, 0x1440
REG = 0x3086, 0x4014
REG = 0x3086, 0x2020
REG = 0x3086, 0x1410
REG = 0x3086, 0x1034
REG = 0x3086, 0x1400
REG = 0x3086, 0x1014
REG = 0x3086, 0x0020
REG = 0x3086, 0x1400
REG = 0x3086, 0x4013
REG = 0x3086, 0x1802
REG = 0x3086, 0x1470
REG = 0x3086, 0x7004
REG = 0x3086, 0x1470
REG = 0x3086, 0x7003
REG = 0x3086, 0x1470
REG = 0x3086, 0x7017
REG = 0x3086, 0x2002
REG = 0x3086, 0x1400
REG = 0x3086, 0x2002
REG = 0x3086, 0x1400
REG = 0x3086, 0x5004
REG = 0x3086, 0x1400
REG = 0x3086, 0x2004
REG = 0x3086, 0x1400
REG = 0x3086, 0x5022
REG = 0x3086, 0x0314
REG = 0x3086, 0x0020
REG = 0x3086, 0x0314
REG = 0x3086, 0x0050
REG = 0x3086, 0x2c2c
REG = 0x3086, 0x2c2c
REG = 0x309E, 0x019A
REG = 0x301E, 0x00C8
REG = 0x3EDA, 0x0F03
REG = 0x3EDE, 0xC005
REG = 0x3ED8, 0x09DF
REG = 0x3EE2, 0xA46B
REG = 0x3EE0, 0x067D
REG = 0x3EDC, 0x0070
REG = 0x3044, 0x0404
REG = 0x3EE6, 0x8303
REG = 0x3EE4, 0xD208
REG = 0x3ED6, 0x00BB
REG = 0x30E4, 0x6372
REG = 0x30E2, 0x7253
REG = 0x30E0, 0x5470
REG = 0x30E6, 0xC4CC
REG = 0x30E8, 0x8050
DELAY = 200
FIELD_WR = RESET_REGISTER, 0x10D8
FIELD_WR = OPERATION_MODE_CTRL, 0x29
REG = 0x30B0, 0x1300
REG = 0x30D4, 0xE007
REG = 0x30BA, 0x0008
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
DELAY = 200
FIELD_WR = RESET_REGISTER, STREAM, 0x0000
DELAY = 200
STATE = Filter, 0
STATE = WB Custom m00, 165
STATE = WB Custom m01, -75
STATE = WB Custom m02, 9
STATE = WB Custom m10, -6
STATE = WB Custom m11, 101
STATE = WB Custom m12, 5
STATE = WB Custom m20, -2
STATE = WB Custom m21, -84
STATE = WB Custom m22, 186
STATE = Color Correction, 1
STATE = True Black Enable, 1
STATE = True Black Level, 200
STATE = WB Adjust Gains, 0
STATE = White Balance, 1
FIELD_WR = BLUE_GAIN, 0x003F
REG = 0x3012, 0x02A0
FIELD_WR = DIGITAL_BINNING, 0x0000
FIELD_WR = Y_ADDR_START, 2
FIELD_WR = X_ADDR_START, 0
FIELD_WR = Y_ADDR_END, 0x03C1
FIELD_WR = X_ADDR_END, 0x04FF
FIELD_WR = FRAME_LENGTH_LINES, 0x03DE
FIELD_WR = LINE_LENGTH_PCK, 0x0672
REG = 0x301A, 0x10D8
REG = 0x31D0, 0x1
FIELD_WR = VT_SYS_CLK_DIV, 0x0002
FIELD_WR = VT_PIX_CLK_DIV, 0x0004
FIELD_WR = PRE_PLL_CLK_DIV, 0x0002
FIELD_WR = PLL_MULTIPLIER, 0x002C
FIELD_WR = DIGITAL_TEST, PLL_COMPLETE_BYPASS, 0x0000
DELAY = 100
REG = 0x301A, 0x10DC
STATE = Defect Enable, 1
STATE = Detect Master Clock, 1
STATE = True Black Enable, 1
STATE = True Black Level, 200
FIELD_WR = EMBEDDED_DATA_CTRL, EMBEDDED_STATS_EN, 0x0001
FIELD_WR = EMBEDDED_DATA_CTRL, EMBEDDED_DATA, 0x0001
STATE = Filter, 0
STATE = WB Custom m00, 165
STATE = WB Custom m01, -75
STATE = WB Custom m02, 9
STATE = WB Custom m10, -6
STATE = WB Custom m11, 101
STATE = WB Custom m12, 5
STATE = WB Custom m20, -2
STATE = WB Custom m21, -84
STATE = WB Custom m22, 186
STATE = Color Correction, 1
STATE = True Black Enable, 1
STATE = True Black Level, 200
STATE = WB Adjust Gains, 0
STATE = White Balance, 1
FIELD_WR = BLUE_GAIN, 0x003F
REG = 0x3100, 0x001B
REG = 0x3112, 0x029F
REG = 0x3114, 0x008C
REG = 0x3116, 0x02C0
REG = 0x3118, 0x005B
REG = 0x3102, 0x0384
REG = 0x3104, 0x1000
REG = 0x3126, 0x0080
REG = 0x311C, 0x03DD
REG = 0x311E, 0x0002
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
FIELD_WR = RESET_REGISTER, STREAM, 0x0000
FIELD_WR = OPERATION_MODE_CTRL, 0x29
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
FIELD_WR = RESET_REGISTER, STREAM, 0x0000
REG = 0x3100, 0x001A
FIELD_WR = RESET_REGISTER, STREAM, 0x0001
IMAGE = 0, 0, BAYER-12
STATE = Auto Exposure, 0
STATE = True Black Enable, 0
STATE = Aperture Enable, 0
STATE = Color Correction, 0
STATE = White Balance, 0
STATE = Filter, 3
STATE = Defect Enable, 0
FIELD_WR = BLUE_GAIN, 0x0020
FIELD_WR = GREEN1_GAIN, 0x0020
FIELD_WR = GREEN2_GAIN, 0x0020
FIELD_WR = RED_GAIN, 0x0020
FIELD_WR = GLOBAL_GAIN, 0x0020

#~ [Python: Print registers]
#~ os.system('clear')
for r in reg:
    print(r.symbol)
    for b in r:
        print('    ', b.symbol)
#~ for i in [0x3058, 0x3056, 0x305C, 0x305A, 0x305E]:
    #~ reg.reg(i).value = 0x0020
    #~ print('Register', i, 'set to value', 0x0020)
#~ for i in [0x3058, 0x3056, 0x305C, 0x305A, 0x305E]:
    #~ register = reg.reg(i).symbol
    #~ value = reg.reg(i).value
    #~ print(register, value)

[Python: User input test]
print ( repr(input("prompt ")) )

[Python: Set exposure time]
was = float(apbase.getstate('HW Exposure Time')) * 1000
print('CMOS is currently set to expose for', round(was, 3), 'ms')
should = int(input('Desired exposure time [ms]:'))
SetExposureTime(should)

[Python: Experiment]
os.system('clear')
# Setting up some standard parameters
# "root" directory where we save everything
BaseDirectory = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number)

# Show where DevWare saves the stuff and other directories
print('DevWare is running from', apbase.home)
print('The current INI file is loaded from', os.path.dirname(__IniFileName))
print('Images will be saved to', devware.getoption_str('Capture File'))
print()

# Use current POSIX time as experiment ID
ExperimentID = round(time.time()) - 1403000000

# Get experiment parameters
## Select modality
print('Please select modality')
Modalities = ['Abdomen', 'Hand', 'Foot', 'Spine', 'Head']
for counter, Modality in enumerate(Modalities):
    print('   * [' + str(counter) + ']:', Modality)
selection = []
while selection not in range(len(Modalities)):
    selection = int(input(' '.join(['Please enter the modality you want [0-' +
                                    str(len(Modalities) - 1) + ']:'])))
    if selection not in range(len(Modalities)):
        print('Try again')
Modality = Modalities[selection]
SaveDirectory = os.path.join(BaseDirectory, Modality, str(ExperimentID))
try:
    os.makedirs(SaveDirectory)
except FileExistsError:
    # Don't do anything if the folder already exists
    pass
devware.setoption_str('Capture File', SaveDirectory)
print()

# Get source parameters
print('Please select x-ray source voltage')
## kV
kVValues = [46, 53, 60, 70, 80, 90, 100, 120]
for counter, kV in enumerate(kVValues):
    print('   * [' + str(counter) + ']:', kV, 'kV')
selection = []
while selection not in range(len(kVValues)):
    selection = int(input(' '.join(['Please enter the kV you set [0-' +
                                    str(len(kVValues) - 1) + ']:'])))
    if selection not in range(len(kVValues)):
        print('Try again')
SourcekV = kVValues[selection]
print('The source is set to', SourcekV, 'kV')
print()
## mA/mAs
print('Please select x-ray source current')
mAValues = [100, 125, 160, 200, 250]
for counter, mA in enumerate(mAValues):
    print('   * [' + str(counter) + ']:', mA, 'mA')
selection = []
while selection not in range(len(mAValues)):
    selection = int(input(' '.join(['Please enter the mA you set [0-' +
                                    str(len(mAValues) - 1) + ']:'])))
    if selection not in range(len(mAValues)):
        print('Try again')
SourcemA = mAValues[selection]
print('The source is set to', SourcemA, 'mA')
print()
SourceExposuretime = float(input(' '.join(['Please input the *x-ray source*',
                                           'exposure time [ms]:'])))
if not SourceExposuretime:
    print('Really, 0 ms? Settting exposure time to 10 ms...')
    SourceExposuretime = 10
SourcemAs = SourcemA * SourceExposuretime / 1000
print('The resulting *mAs* is thus', SourcemAs, 'mAs')
print()

# Get CMOS parameters
WasExposureTime = float(apbase.getstate('HW Exposure Time')) * 1000
print('Please input the desired *CMOS* exposure time.')
print('We suggest to use')
print('   * less than', int(round(SourceExposuretime / 10)),
    'ms so you get at least 10 exposured during the x-ray pulse.')
print('   * more than than', int(round((1 / maxfps) * 1000)),
    'ms to get as many photons as possible during the maximum of', maxfps,
    'fps we can read out for the', apbase.Camera().sensor.part_number,
    'sensor.')

DesiredExposureTime = float(input('Desired *CMOS* exposure time [ms]:'))
if not DesiredExposureTime:
    print('Really, 0 ms? Settting exposure time to 1 ms...')
    DesiredExposureTime = 1

# Define expperiment time
RecordingTime = input('How long would you like to record images? [s]:')
if RecordingTime:
    RecordingTime = int(RecordingTime)
else:
    RecordingTime = 1
if RecordingTime < 2 * (SourceExposuretime / 1000):
    print('We want to record at least during twice the exposure time of the',
        'source, which is', SourceExposuretime, 'ms.')
    RecordingTime = 2 * (SourceExposuretime / 1000)
    print('Thus setting the recording time to', RecordingTime, 's.')
print()

# Calculate fps and some other bits to give some info and set the filenames
fps = 1 / (DesiredExposureTime / 1000)
print(80 * '-')
print('You want to grab images with', DesiredExposureTime,
       'ms exposure time (' + str(round(fps, 1)), 'fps) during', RecordingTime,
       's.')

# Inform the user if the resulting frames per second are more than what we can
# reach with the current setup
if fps > float(maxfps):
    print('Since we cannot save faster than', maxfps, 'fps with the',
        apbase.Camera().sensor.part_number, 'sensor, we increase the exposure',
        'of the CMOS from', DesiredExposureTime, 'ms to',
        round((1 / maxfps) * 1000, 3), 'ms.')
    # Set exposuretime to 'maxfps' frames per second
    DesiredExposureTime = (1 / maxfps) * 1000
# And actually set CMOS exposure time now
CMOSExposuretime = SetExposureTime(DesiredExposureTime)
NumberOfImages = int(round(RecordingTime / (CMOSExposuretime / 1000)))

# Inform the user about what goes where.
print()
FilePrefix = '_'.join([Modality, str(ExperimentID),
                       str(CMOSWidth) + 'x' + str(CMOSHeight),
                       str(SourcekV) + 'kV',
                       str(SourcemAs) + 'mAs',
                       str(SourceExposuretime) + 'msSource',
                       str(round(CMOSExposuretime, 3)) + 'msCMOS'])
print('The results of experiment ID:', ExperimentID)
print('   * of a', Modality, 'phantom imaged with')
print('   * an x-ray pulse of', SourcekV, 'kV and', SourcemAs, 'mAs will be')
print('   * approximately', NumberOfImages, 'images with names like')
print('    ', FilePrefix + '*.raw.')
print('   * in the folder', devware.getoption_str('Capture File'))
print()

# Prepare the user for the experiment
waittime = 5
print('As soon as you press "Enter", a', waittime, 's long count-down will',
    'start.')
print('Once the count-down is done image acquisition starts.')
print('Once I am saving images, you should also press the x-ray source',
    'button')
input()

# Acquire the images
# Clear the frame buffer
for i in range(4):
    Return, Image = apbase.Camera().grab_frame()
# Prepare the user
CountDownTime = 5
print ()
StartTime = time.time()
# clear the commandline with ANSI escape sequence
# http://stackoverflow.com/a/11986396
while time.time() <= StartTime + CountDownTime:
    print('\x1b[1A', 35 * ' ', 'Countdown:',
        int(round(waittime - (time.time() - StartTime))))
    time.sleep(0.1)
print()
print('Lift off!')
print(80 * '-')
print()
# Image saving loop
Counter = 1
StartTime = time.time()
while time.time() <= StartTime + RecordingTime:
    s = time.time()
    # Grab an image from the CMOS and save it to a nicely named file
    Return, Image = apbase.Camera().grab_frame()
    with open(os.path.join(SaveDirectory,
                            str(FilePrefix) + '_' + \
                            str(Counter).zfill(len(str(NumberOfImages))) + \
                            '.raw'), 'wb') as Imagefile:
        Imagefile.write(Image)
    e = time.time()
    print('\x1b[1ASaving image',
        str(Counter).zfill(len(str(NumberOfImages))) + '/' + \
        str(NumberOfImages), '| elapsed time:',
        str(round(time.time() -
            StartTime, 2)).zfill(3 + len(str(RecordingTime))) + '/' + \
        str(RecordingTime), 's |', str(round((1 / (e - s)), 1)).zfill(4),
        'fps.')
    Counter += 1
print(80 * '-')

print('CMOS exposure time set back to',
    round(SetExposureTime(WasExposureTime), 3),
    'ms (what it was before the experiment).')

print('Saved', Counter, 'images to', SaveDirectory)
fijioutput()

# General stuff which we always need. This preset is executed at INI file load
[Python:]
import os
os.system('clear')
import time


def fijioutput():
    print(80 * '-')
    print('Open the RAW files in Fiji as')
    print('   * "16-bit Unsigned" with')
    print('   * a width of', str(CMOSWidth), 'px,')
    print('   * a height of', str(CMOSHeight), 'px and')
    print('   * with "Little-Endian byte order"')
    print(80 * '-')


def SetExposureTime(DesiredExposureTime):
    CurrentExposureTime = round(float(apbase.getstate('HW Exposure Time')) *
                                      1000, 3)
    apbase.setstate('HW Exposure Time', str(DesiredExposureTime / 1000))
    # Grab some frames from the buffer to make sure the settings stuck
    frames = 4
    for i in range(frames):
        Return, Image = apbase.Camera().grab_frame()
        #~ print('Grabbing frame', str(i) + '/' + str(frames),
            #~ 'to make the settings stick.')
    ActualExposuretime = float(apbase.getstate('HW Exposure Time')) * 1000
    print('Setting CMOS Exposure time from', CurrentExposureTime, 'to',
        round(DesiredExposureTime, 3), 'ms (desired,',
        round(ActualExposuretime, 3), 'ms actual).')
    return ActualExposuretime

CMOSWidth = apbase.Camera().sensor.width
CMOSHeight = apbase.Camera().sensor.height

if 'AR0130' in apbase.Camera().sensor.part_number:
    print('Setting AR0130 to default values')
    maxfps = 10.3
if 'AR0132' in apbase.Camera().sensor.part_number:
    print('Setting AR0132 to default values')
    maxfps = 15.5
if 'MT9M001' in apbase.Camera().sensor.part_number:
    print('Setting MT9M001 to default values')
    maxfps = 7.8

print()
print(15 * ' ', 'Semi-randomly set maximum fps to', maxfps)
print(15 * ' ', 'This *needs* empirical tests with the sensors!')
print()
