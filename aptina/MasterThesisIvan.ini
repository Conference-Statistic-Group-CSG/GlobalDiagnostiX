# INI file for Ivans Master thesis.
# We need to set
#   * the experiment number,
#   * the modality and
#   * the output parameters of the source (kv, mAs and the like)

# For names of classes and attributes see the Aptina atalassian website under
# https://aptina.atlassian.net/wiki/display/DEVS/DevWare+Python

# General stuff which we always need. This preset is executed at INI file load
[Python:]
import os
os.system('clear')
import time

CMOSWidth = apbase.Camera().sensor.width
CMOSHeight = apbase.Camera().sensor.height

# Probably it would be a good idea to reset all the different sensors to their
# initial state at the beginning of the INI file.
# Grabbing presets from their respective orignal INI files (see comment) and
# translating them to python with the help of http://is.gd/EtEwf8
## AR0130: ?
if 'AR0130' in apbase.Camera().sensor.part_number:
    print('Setting AR0130 to default values')
    maxfps = 10.3
## AR0132: Linear Mode RAW (copied from AR0132-REV6.ini)
if 'AR0132' in apbase.Camera().sensor.part_number:
    print('Setting AR0132 to default values')
    maxfps = 200
    #~ reg.reg(0x301A).value = 0x0000
    #~ reg.OPERATION_MODE_CTRL=0x29
    #~ reg.reg(0x301A).value=0x0001
    #~ reg.reg(0x301A).value=0x0000
    #~ reg.reg(0x3100).value = 0x001A
    #~ reg.reg(0x301A).value=0x0001
    #~ apbase.image(0,0,'BAYER-12')
    #~ apbase.setstate('Auto Exposure', 0)
    #~ apbase.setstate('True Black Enable', 0)
    #~ apbase.setstate('Aperture Enable', 0)
    #~ apbase.setstate('Color Correction', 0)
    #~ apbase.setstate('White Balance', 0)
    #~ apbase.setstate('Filter', 3)
    #~ apbase.setstate('Defect Enable', 0)
    #~ reg.BLUE_GAIN = 0x0020
    #~ reg.GREEN1_GAIN = 0x0020
    #~ reg.GREEN2_GAIN = 0x0020
    #~ reg.RED_GAIN = 0x0020
    #~ reg.GLOBAL_GAIN = 0x0020
## MT9M001: ?
if 'MT9M001' in apbase.Camera().sensor.part_number:
    print('Setting MT9M001 to default values')
    maxfps = 7.8
print()
print(15 * ' ', 'Semi-randomly set maximum fps to', maxfps)
print(15 * ' ', 'This *needs* empirical tests with the sensors!')
print()


def fijioutput():
    print(80 * '-')
    print('Open the RAW files in Fiji as')
    print('   * "16-bit Unsigned" with')
    print('   * a width of', str(CMOSWidth), 'px,')
    print('   * a height of', str(CMOSHeight), 'px and')
    print('   * with "Little-Endian byte order"')
    print(80 * '-')


def SetExposureTime(DesiredExposureTime):
    CurrentExposureTime = round(float(apbase.getstate('HW Exposure Time')) *
                                      1000, 3)
    apbase.setstate('HW Exposure Time', str(DesiredExposureTime / 1000))
    # Grab some frames from the buffer to make sure the settings stuck
    frames = 4
    for i in range(frames):
        Return, Image = apbase.Camera().grab_frame()
        #~ print('Grabbing frame', str(i) + '/' + str(frames),
            #~ 'to make the settings stick.')
    ActualExposuretime = float(apbase.getstate('HW Exposure Time')) * 1000
    print('Setting CMOS Exposure time from', CurrentExposureTime, 'to',
        round(DesiredExposureTime, 3), 'ms (desired,',
        round(ActualExposuretime, 3), 'ms actual).')
    return ActualExposuretime

[Python: Set exposure time]
was = float(apbase.getstate('HW Exposure Time')) * 1000
print('CMOS is currently set to expose for', round(was, 3), 'ms')
should = int(input('Desired exposure time [ms]:'))
SetExposureTime(should)

[Python: Experiment]
os.system('clear')
# Setting up some standard parameters
# "root" directory where we save everything
BaseDirectory = os.path.join('/scratch', 'tmp', 'DevWareX',
                       apbase.Camera().sensor.part_number)

# Show where DevWare saves the stuff and other directories
print('DevWare is running from', apbase.home)
print('The current INI file is loaded from', os.path.dirname(__IniFileName))
print('Images will be saved to', devware.getoption_str('Capture File'))
print()

# Use current POSIX time as experiment ID
ExperimentID = round(time.time()) - 1403000000

# Get experiment parameters
## Select modality
print('Please select modality')
Modalities = ['Abdomen', 'Hand', 'Foot', 'Spine', 'Head']
for counter, Modality in enumerate(Modalities):
    print('   * [' + str(counter) + ']:', Modality)
selection = []
while selection not in range(len(Modalities)):
    selection = int(input(' '.join(['Please enter the modality you want [0-' +
                                    str(len(Modalities) - 1) + ']:'])))
    if selection not in range(len(Modalities)):
        print('Try again')
Modality = Modalities[selection]
SaveDirectory = os.path.join(BaseDirectory, Modality, str(ExperimentID))
try:
    os.makedirs(SaveDirectory)
except FileExistsError:
    # Don't do anything if the folder already exists
    pass
devware.setoption_str('Capture File', SaveDirectory)
print()

# Get source parameters
print('Please select x-ray source voltage')
## kV
kVValues = [46, 53, 60, 70, 80, 90, 100, 120]
for counter, kV in enumerate(kVValues):
    print('   * [' + str(counter) + ']:', kV, 'kV')
selection = []
while selection not in range(len(kVValues)):
    selection = int(input(' '.join(['Please enter the kV you set [0-' +
                                    str(len(kVValues) - 1) + ']:'])))
    if selection not in range(len(kVValues)):
        print('Try again')
SourcekV = kVValues[selection]
print('The source is set to', SourcekV, 'kV')
print()
## mA/mAs
print('Please select x-ray source current')
mAValues = [100, 125, 160, 200, 250]
for counter, mA in enumerate(mAValues):
    print('   * [' + str(counter) + ']:', mA, 'mA')
selection = []
while selection not in range(len(mAValues)):
    selection = int(input(' '.join(['Please enter the mA you set [0-' +
                                    str(len(mAValues) - 1) + ']:'])))
    if selection not in range(len(mAValues)):
        print('Try again')
SourcemA = mAValues[selection]
print('The source is set to', SourcemA, 'mA')
print()
SourceExposuretime = float(input(' '.join(['Please input the *x-ray source*',
                                           'exposure time [ms]:'])))
if not SourceExposuretime:
    print('Really, 0 ms? Settting exposure time to 1 ms...')
    SourceExposuretime = 1
SourcemAs = SourcemA * SourceExposuretime / 1000
print('The resulting *mAs* is thus', SourcemAs, 'mAs')
print()

# Get CMOS parameters
WasExposureTime = float(apbase.getstate('HW Exposure Time')) * 1000
print('Please input the desired *CMOS* exposure time.')
print('We suggest to use')
print('   * less than', SourceExposuretime / 10,
    'ms so you get at least 10 exposured during the x-ray pulse.')
print('   * more than than', round((1 / maxfps) * 1000, 3),
    'ms to get as many photons as possible during the maximum of', maxfps,
    'fps we can read out for the', apbase.Camera().sensor.part_number,
    'sensor.')

DesiredExposureTime = float(input('Desired *CMOS* exposure time [ms]:'))
if not DesiredExposureTime:
    print('Really, 0 ms? Settting exposure time to 1 ms...')
    DesiredExposureTime = 1

# Define expperiment time
RecordingTime = int(input('How long would you like to record images? [s]:'))
if RecordingTime < 2 * (SourceExposuretime / 1000):
    print('We want to record at least during twice the exposure time of the',
        'source, which is', SourceExposuretime, 'ms.')
    RecordingTime = 2 * (SourceExposuretime / 1000)
    print('Thus setting the recording time to', RecordingTime, 's.')
print()

# Calculate fps and some other bits to give some info and set the filenames
fps = 1 / (DesiredExposureTime / 1000)
print(80 * '-')
print('You want to grab images with', DesiredExposureTime,
       'ms exposure time (' + str(round(fps, 1)), 'fps) during', RecordingTime,
       's.')

# Inform the user if the resulting frames per second are more than what we can
# reach with the current setup
if fps > float(maxfps):
    print('Since we cannot save faster than', maxfps, 'fps with the',
        apbase.Camera().sensor.part_number, 'sensor, we increase the exposure',
        'of the CMOS from', DesiredExposureTime, 'ms to',
        round((1 / maxfps) * 1000, 3), 'ms.')
    # Set exposuretime to 'maxfps' frames per second
    DesiredExposureTime = (1 / maxfps) * 1000
# And actually set CMOS exposure time now
CMOSExposuretime = SetExposureTime(DesiredExposureTime)
NumberOfImages = int(round(RecordingTime / (CMOSExposuretime / 1000)))

# Inform the user about what goes where.
print()
FilePrefix = '_'.join([Modality, str(ExperimentID),
                       str(CMOSWidth) + 'x' + str(CMOSHeight),
                       str(SourcekV) + 'kV',
                       str(SourcemAs) + 'mAs',
                       str(SourceExposuretime) + 'msSource',
                       str(round(CMOSExposuretime * 1000, 3)) + 'msCMOS'])
print('The results of experiment ID:', ExperimentID)
print('   * of a', Modality, 'phantom imaged with')
print('   * an x-ray pulse of', SourcekV, 'kV and', SourcemAs, 'mAs will be')
print('   *', NumberOfImages, 'images with names like', FilePrefix + '*.raw.')
print('   * in the folder', devware.getoption_str('Capture File'))
print()

# Prepare the user for the experiment
waittime = 5
print('As soon as you press "Enter", a', waittime, 's long count-down will',
    'start.')
print('Once the count-down is done image acquisition starts.')
print('Once I am saving images, you should also press the x-ray source',
    'button')
input()

# Acquire the images
# Clear the frame buffer
for i in range(4):
    Return, Image = apbase.Camera().grab_frame()
# Prepare the user
CountDownTime = 5
print ()
StartTime = time.time()
# clear the commandline with ANSI escape sequence
# http://stackoverflow.com/a/11986396
while time.time() <= StartTime + CountDownTime:
    print('\x1b[1A', 35 * ' ', 'Countdown:',
        int(round(waittime -  (time.time() - StartTime))))
    time.sleep(0.1)
print()
print('Lift off!')
print(80 * '-')
print()
# Image saving loop
Counter = 1
StartTime = time.time()
while time.time() <= StartTime + RecordingTime:
    s = time.time()
    # Grab an image from the CMOS and save it to a nicely named file
    Return, Image = apbase.Camera().grab_frame()
    with open(os.path.join(SaveDirectory,
                            str(FilePrefix) + '_' + \
                            str(Counter).zfill(len(str(NumberOfImages))) + \
                            '.raw'), 'wb') as Imagefile:
        Imagefile.write(Image)
    e = time.time()
    print('\x1b[1ASaving image',
        str(Counter).zfill(len(str(NumberOfImages))) + '/' + \
        str(NumberOfImages), '| elapsed time:',
        str(round(time.time() -
            StartTime, 2)).zfill(3 + len(str(RecordingTime))) + '/' + \
        str(RecordingTime), 's |', str(round((1 / (e - s)), 1)).zfill(4),
        'fps.')
    Counter += 1
print(80 * '-')

print('CMOS exposure time set back to',
    round(SetExposureTime(WasExposureTime),3),
    'ms (what it was before the experiment).')

print('Saved', Counter, 'images to', SaveDirectory)
fijioutput()
